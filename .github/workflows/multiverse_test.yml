name: "üå† LIVE - Omnipkg Quantum Multiverse Warp"

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # Use -e . for editable install
          pip install -e . redis rich==13.7.1

      - name: Configure omnipkg for non-interactive use
        run: |
          python - << 'EOF'
          import sys
          import site
          import json
          from pathlib import Path
          import os
          import sysconfig

          try:
              site_packages_path = site.getsitepackages()[0]
          except (IndexError, AttributeError):
              site_packages_path = sysconfig.get_paths()['purelib']

          # Get the correct site-packages path to set for the config, which is critical for omnipkg
          # The logic below ensures it points to the root environment's site-packages where interpreters are managed
          omnipkg_base_path = Path(sys.executable).parent.parent / 'lib' / f'python{sys.version_info.major}.{sys.version_info.minor}' / 'site-packages'

          project_root = Path(os.environ['GITHUB_WORKSPACE'])
          builder_script = project_root / 'omnipkg' / 'package_meta_builder.py'
          if not builder_script.exists():
              print(f"Error: {builder_script} does not exist")
              sys.exit(1)

          config_data = {
              # Use the derived path instead of generic site.getsitepackages()
              'site_packages_path': str(omnipkg_base_path),
              'multiversion_base': str(omnipkg_base_path / '.omnipkg_versions'),
              'python_executable': sys.executable,
              'builder_script_path': str(builder_script),
              'redis_host': 'localhost',
              'redis_port': 6379,
              'redis_key_prefix': 'omnipkg:pkg:',
              # Use the paths from the hosted runner environment
              'paths_to_index': [str(Path(sys.executable).parent), '/usr/local/bin', '/usr/bin', '/bin', '/usr/sbin', '/sbin'],
              'auto_cleanup': True,
              'cleanup_threshold_days': 30
          }

          config_dir = Path.home() / '.config' / 'omnipkg'
          config_dir.mkdir(parents=True, exist_ok=True)
          config_path = config_dir / 'config.json'
          
          try:
              with open(config_path, 'w') as f:
                  json.dump(config_data, f, indent=2)
              print(f'omnipkg config created at {config_path}:')
              print(json.dumps(config_data, indent=2))
          except Exception as e:
              print(f"Error writing config: {e}")
              sys.exit(1)
          EOF

      - name: Adopt Required Python Versions
        run: |
          echo "--- Adopting Python Versions for Multiverse Test ---"
          
          # Check current Python version
          CURRENT_PYTHON_VERSION=$(python -c "import sys; print(f'{sys.version_info.major}.{sys.version_info.minor}')")
          echo "Current Python version: $CURRENT_PYTHON_VERSION"
          
          # Define required versions
          REQUIRED_VERSIONS=("3.9" "3.10" "3.11")
          
          # Adopt each version if not already current
          for VERSION in "${REQUIRED_VERSIONS[@]}"; do
            if [ "$VERSION" != "$CURRENT_PYTHON_VERSION" ]; then
              echo "Adopting Python $VERSION..."
              # Use a generous timeout for the first time adoption which downloads/builds interpreters
              if timeout 600 omnipkg python adopt $VERSION; then
                echo "‚úÖ Successfully adopted Python $VERSION"
              else
                echo "‚ùå Failed to adopt Python $VERSION"
                exit 1
              fi
            else
              echo "‚úÖ Python $VERSION is already current version"
            fi
          done
          
          echo "All required Python versions have been adopted!"

      - name: Run Quantum Multiverse Demo and Verify
        id: run_multiverse_demo
        run: |
          echo "--- Running Omnipkg Quantum Multiverse Warp Demo (Option 8) ---"
          mkdir -p /tmp/omnipkg-artifacts
          
          # Set pipefail to catch any failures in the pipeline
          set -o pipefail
          
          # Run the demo with option 8 (Quantum Multiverse Warp)
          # Redirect all output to a file and to stdout
          if ! timeout 900 bash -c 'echo "8" | omnipkg demo' 2>&1 | tee /tmp/omnipkg-artifacts/multiverse_demo_output.txt; then
            echo "‚ùå Demo execution failed or timed out. See full output below."
            cat /tmp/omnipkg-artifacts/multiverse_demo_output.txt
            exit 1
          fi
          
          # --- Verification ---
          
          # Core Success Check 1: Final success message
          if ! grep -q "üéâ Demo completed successfully!" /tmp/omnipkg-artifacts/multiverse_demo_output.txt; then
            echo "‚ùå Final success message 'Demo completed successfully!' NOT found."
            exit 1
          fi
          
          # Core Success Check 2: Multiverse completion message
          if ! grep -q "üéâüéâüéâ MULTIVERSE TEST COMPLETE! üéâüéâüéâ" /tmp/omnipkg-artifacts/multiverse_demo_output.txt; then
            echo "‚ùå Final multiverse completion message NOT found."
            exit 1
          fi
          
          # Core Success Check 3: All 3 Python versions swapped context successfully
          PYTHON_39_SWITCH=$(grep -c "Context switched to Python 3.9" /tmp/omnipkg-artifacts/multiverse_demo_output.txt)
          PYTHON_310_SWITCH=$(grep -c "Context switched to Python 3.10" /tmp/omnipkg-artifacts/multiverse_demo_output.txt)
          PYTHON_311_SWITCH=$(grep -c "Context switched to Python 3.11" /tmp/omnipkg-artifacts/multiverse_demo_output.txt)
          
          if [ $PYTHON_39_SWITCH -ge 1 ] && [ $PYTHON_310_SWITCH -ge 1 ] && [ $PYTHON_311_SWITCH -ge 1 ]; then
            echo "‚úÖ Core functionality PASSED! All 3 Python versions successfully swapped context (3.9: ${PYTHON_39_SWITCH}, 3.10: ${PYTHON_310_SWITCH}, 3.11: ${PYTHON_311_SWITCH})."
            echo "demo_outcome=success" >> $GITHUB_OUTPUT
            
            # --- Artifact Summary ---
            echo "## Quantum Multiverse Demo Summary" >> $GITHUB_STEP_SUMMARY
            grep -E "DIMENSION TEST COMPLETE|Total Concurrent Runtime" /tmp/omnipkg-artifacts/multiverse_demo_output.txt >> $GITHUB_STEP_SUMMARY
            echo '```bash' >> $GITHUB_STEP_SUMMARY
            tail -n 20 /tmp/omnipkg-artifacts/multiverse_demo_output.txt >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            exit 0
          else
            echo "‚ùå Context switching FAILED. Required 1+ switch for each version. Found:"
            echo "   - Python 3.9 switches: $PYTHON_39_SWITCH"
            echo "   - Python 3.10 switches: $PYTHON_310_SWITCH"
            echo "   - Python 3.11 switches: $PYTHON_311_SWITCH"
            exit 1
          fi

      # The unnecessary 'Verify Multiverse Success Indicators' step has been removed.

      - name: Archive Multiverse Demo Output
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: omnipkg-multiverse-demo-output
          path: /tmp/omnipkg-artifacts/
          retention-days: 7
          compression-level: 6
