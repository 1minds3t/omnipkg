name: "Python Adoption: Multiverse Analysis Test"

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test-python-adoption:
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.11 (base environment)
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e . redis

      - name: Configure omnipkg for non-interactive use
        # This configuration step remains the same as it prepares the config file
        run: |
          python - << 'EOF'
          import sys, site, json, os, sysconfig
          from pathlib import Path
          try: site_packages_path = site.getsitepackages()[0]
          except (IndexError, AttributeError): site_packages_path = sysconfig.get_paths()['purelib']
          project_root = Path(os.environ['GITHUB_WORKSPACE'])
          builder_script = project_root / 'omnipkg' / 'package_meta_builder.py'
          if not builder_script.exists(): sys.exit(f"Error: {builder_script} does not exist")
          config_data = {
              'site_packages_path': site_packages_path,
              'multiversion_base': str(Path(site_packages_path) / '.omnipkg_versions'),
              'python_executable': sys.executable,
              'builder_script_path': str(builder_script),
              'redis_host': 'localhost', 'redis_port': 6379, 'redis_key_prefix': 'omnipkg:pkg:',
              'paths_to_index': [str(Path(sys.executable).parent), '/usr/local/bin', '/usr/bin', '/bin'],
              'auto_cleanup': True, 'cleanup_threshold_days': 30
          }
          config_dir = Path.home() / '.config' / 'omnipkg'
          config_dir.mkdir(parents=True, exist_ok=True)
          config_path = config_dir / 'config.json'
          with open(config_path, 'w') as f: json.dump(config_data, f, indent=2)
          print(f'omnipkg config created at {config_path}')
          EOF

      - name: Adopt Environments and Run Multiverse Test
        id: full_test_run
        run: |
          # Use 'set -e' to ensure the script fails immediately if any command fails.
          set -e

          echo "--- 1. Adopting Python 3.11 (Base Environment) ---"
          # This first call will perform the initial setup and grounding.
          omnipkg python adopt 3.11

          echo "--- 2. Adopting Python 3.9 ---"
          # This call runs in the same session, so the environment is already known.
          omnipkg python adopt 3.9

          echo "--- 3. Running Multiverse Analysis Script ---"
          # Now, run the test. Its subprocess calls to 'omnipkg' will inherit
          # the initialized state from this shell, preventing re-initialization.
          python tests/multiverse_analysis.py

      - name: Archive Test Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: omnipkg-python-adoption-test-artifacts
          path: |
            /tmp/omnipkg-artifacts/
            multiverse_log.jsonl
          retention-days: 7
          compression-level: 6

      - name: Test Summary
        if: always()
        run: |
          echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Test | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|------|--------|" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ steps.full_test_run.outcome }}" == "success" ]]; then
            echo "| Multiverse Analysis | ✅ Success |" >> $GITHUB_STEP_SUMMARY
            echo "All tests passed!"
          else
            echo "| Multiverse Analysis | ❌ Failure |" >> $GITHUB_STEP_SUMMARY
            echo "The test suite failed. Check the logs above for details."
            exit 1
          fi
