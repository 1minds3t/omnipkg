name: "ðŸŒ  LIVE - Omnipkg Quantum Multiverse Warp (CORRECTED)"
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping" --health-interval 10s --health-timeout 5s --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python 3.11 (for the main runner)
        id: setup_python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e . redis rich==13.7.1
          
      - name: Configure omnipkg and Establish Authoritative ENV_ID
        id: setup_omnipkg
        run: |
          # This step configures omnipkg and calculates the single, true ENV_ID
          # that will be used for the rest of this job.
          python - << 'EOF'
          import json
          import os
          from pathlib import Path
          from omnipkg.core import ConfigManager

          # Create the .omnipkg directory for config
          config_dir = Path.home() / '.omnipkg'
          config_dir.mkdir(exist_ok=True)
          
          # Write the base non-interactive config
          config = {
              "interactive": False,
              "auto_confirm": True,
              "redis_url": "redis://localhost:6379"
          }
          with open(config_dir / 'config.json', 'w') as f:
              json.dump(config, f, indent=2)
          print("âœ… Omnipkg configured for non-interactive use")
          
          # Calculate the ENV_ID based on the main runner's environment
          main_env_id = ConfigManager().env_id
          print(f"Authoritative Environment ID for this job: {main_env_id}")
          
          # Export it for all subsequent steps via the GITHUB_ENV file
          with open(os.environ['GITHUB_ENV'], 'a') as f:
              f.write(f"OMNIPKG_ENV_ID_OVERRIDE={main_env_id}\n")
          EOF
          
      - name: Adopt All Required Python Versions
        env:
          # Inject the authoritative ENV_ID into this step
          OMNIPKG_ENV_ID_OVERRIDE: ${{ env.OMNIPKG_ENV_ID_OVERRIDE }}
        run: |
          echo "--- Adopting Python Versions ---"
          omnipkg python adopt 3.9
          omnipkg python adopt 3.10
      
      - name: Reset and Prime Environments to Build Knowledge Bases
        env:
          # Inject the authoritative ENV_ID here as well
          OMNIPKG_ENV_ID_OVERRIDE: ${{ env.OMNIPKG_ENV_ID_OVERRIDE }}
        run: |
          echo "--- Resetting and Priming Python environments ---"
          
          PYTHON_39_EXE=$(omnipkg info python | grep 'Python 3.9:' | awk '{print $3}')
          PYTHON_310_EXE=$(omnipkg info python | grep 'Python 3.10:' | awk '{print $3}')

          echo "Priming Python 3.9 by forcing KB rebuild..."
          # This now correctly resets the KB for the MAIN environment ID
          "$PYTHON_39_EXE" -m omnipkg.cli reset --yes
          
          echo "Priming Python 3.10 by forcing KB rebuild..."
          "$PYTHON_310_EXE" -m omnipkg.cli reset --yes
          
          echo "âœ… All Python environments have been primed."

      - name: Pre-Install and Verify Test Packages
        env:
          # And inject it here
          OMNIPKG_ENV_ID_OVERRIDE: ${{ env.OMNIPKG_ENV_ID_OVERRIDE }}
        run: |
          echo "--- Pre-installing exact rich versions ---"
          PYTHON_39_EXE=$(omnipkg info python | grep 'Python 3.9:' | awk '{print $3}')
          PYTHON_310_EXE=$(omnipkg info python | grep 'Python 3.10:' | awk '{print $3}')
          
          # Uninstall any existing rich to ensure a clean install, not a bubble
          "$PYTHON_39_EXE" -m omnipkg.cli uninstall rich --yes || true
          "$PYTHON_39_EXE" -m omnipkg.cli install rich==13.4.2
          
          "$PYTHON_310_EXE" -m omnipkg.cli uninstall rich --yes || true
          "$PYTHON_310_EXE" -m omnipkg.cli install rich==13.6.0
          
          echo "--- Verifying Package Installations ---"
          "$PYTHON_39_EXE" -c "import rich; assert rich.__version__ == '13.4.2', f'Wrong version found: {rich.__version__}'"
          "$PYTHON_310_EXE" -c "import rich; assert rich.__version__ == '13.6.0', f'Wrong version found: {rich.__version__}'"
          echo "âœ… All packages correctly installed and verified."
      
      - name: Run Quantum Multiverse Demo and Verify
        env:
          # And finally, here too.
          OMNIPKG_ENV_ID_OVERRIDE: ${{ env.OMNIPKG_ENV_ID_OVERRIDE }}
        run: |
          echo "--- Running Omnipkg Quantum Multiverse Warp Demo ---"
          echo "8" | omnipkg demo
