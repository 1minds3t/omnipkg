name: "🌠 LIVE - Omnipkg Quantum Multiverse Warp (FINAL)"
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping" --health-interval 10s --health-timeout 5s --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e . redis rich
          
      - name: Configure omnipkg and Establish Authoritative ENV_ID
        id: setup_omnipkg
        run: |
          python - << 'EOF'
          import json
          import os
          from pathlib import Path
          from omnipkg.core import ConfigManager
          config_dir = Path.home() / '.config' / 'omnipkg'
          config_dir.mkdir(parents=True, exist_ok=True)
          
          config = {
              "interactive": False,
              "auto_confirm": True,
              "redis_url": "redis://localhost:6379"
          }
          with open(config_dir / 'config.json', 'w') as f:
              json.dump(config, f, indent=2)
          print("✅ Omnipkg configured for non-interactive use")
          
          main_env_id = ConfigManager().env_id
          print(f"Authoritative Environment ID for this job: {main_env_id}")
          
          with open(os.environ['GITHUB_ENV'], 'a') as f:
              f.write(f"OMNIPKG_ENV_ID_OVERRIDE={main_env_id}\n")
          EOF
          
      - name: Adopt All Required Python Versions
        env:
          OMNIPKG_ENV_ID_OVERRIDE: ${{ env.OMNIPKG_ENV_ID_OVERRIDE }}
        run: |
          echo "--- Adopting Python Versions ---"
          omnipkg python adopt 3.9 2>/dev/null || true
          omnipkg python adopt 3.10 2>/dev/null || true
      
      - name: Reset and Prime Environments to Build Knowledge Bases
        env:
          OMNIPKG_ENV_ID_OVERRIDE: ${{ env.OMNIPKG_ENV_ID_OVERRIDE }}
        run: |
          echo "--- Resetting and Priming Python environments ---"
          
          # Get Python executables without broken pipe errors
          PYTHON_INFO=$(omnipkg info python 2>/dev/null)
          PYTHON_39_EXE=$(echo "$PYTHON_INFO" | grep 'Python 3.9:' | awk '{print $4}' || echo "")
          PYTHON_310_EXE=$(echo "$PYTHON_INFO" | grep 'Python 3.10:' | awk '{print $4}' || echo "")
          PYTHON_311_EXE=$(echo "$PYTHON_INFO" | grep 'Python 3.11:' | awk '{print $4}' || echo "")
          
          if [ -n "$PYTHON_39_EXE" ]; then
            echo "Priming Python 3.9 by forcing KB rebuild..."
            "$PYTHON_39_EXE" -m omnipkg.cli reset --yes 2>/dev/null || true
          fi
          
          if [ -n "$PYTHON_310_EXE" ]; then
            echo "Priming Python 3.10 by forcing KB rebuild..."
            "$PYTHON_310_EXE" -m omnipkg.cli reset --yes 2>/dev/null || true
          fi
          
          if [ -n "$PYTHON_311_EXE" ]; then
            echo "Priming Python 3.11 by forcing KB rebuild..."
            "$PYTHON_311_EXE" -m omnipkg.cli reset --yes 2>/dev/null || true
          fi
          
          echo "✅ All Python environments have been primed."
      
      - name: Pre-Install Test Packages
        env:
          OMNIPKG_ENV_ID_OVERRIDE: ${{ env.OMNIPKG_ENV_ID_OVERRIDE }}
        run: |
          echo "--- Pre-installing exact rich versions ---"
          
          # Get Python executables without broken pipe errors
          PYTHON_INFO=$(omnipkg info python 2>/dev/null)
          PYTHON_39_EXE=$(echo "$PYTHON_INFO" | grep 'Python 3.9:' | awk '{print $4}' || echo "")
          PYTHON_310_EXE=$(echo "$PYTHON_INFO" | grep 'Python 3.10:' | awk '{print $4}' || echo "")
          PYTHON_311_EXE=$(echo "$PYTHON_INFO" | grep 'Python 3.11:' | awk '{print $4}' || echo "")
          
          if [ -n "$PYTHON_39_EXE" ]; then
            echo "Installing rich==13.4.2 for Python 3.9 (expecting it to be bubbled)..."
            "$PYTHON_39_EXE" -m omnipkg.cli install rich==13.4.2 2>/dev/null || true
          fi
          
          if [ -n "$PYTHON_310_EXE" ]; then
            echo "Installing rich==13.6.0 for Python 3.10 (expecting it to be bubbled)..."
            "$PYTHON_310_EXE" -m omnipkg.cli install rich==13.6.0 2>/dev/null || true
          fi
          
          if [ -n "$PYTHON_311_EXE" ]; then
            echo "Installing rich==13.7.1 for Python 3.11 (expecting it to be bubbled)..."
            "$PYTHON_311_EXE" -m omnipkg.cli install rich==13.7.1 2>/dev/null || true
          fi
      
      - name: Verify Correct State (Bubbles are Present)
        env:
          OMNIPKG_ENV_ID_OVERRIDE: ${{ env.OMNIPKG_ENV_ID_OVERRIDE }}
        run: |
          echo "--- Verifying Package State ---"
          
          # Get Python executables without broken pipe errors
          PYTHON_INFO=$(omnipkg info python 2>/dev/null)
          PYTHON_39_EXE=$(echo "$PYTHON_INFO" | grep 'Python 3.9:' | awk '{print $4}' || echo "")
          PYTHON_310_EXE=$(echo "$PYTHON_INFO" | grep 'Python 3.10:' | awk '{print $4}' || echo "")
          PYTHON_311_EXE=$(echo "$PYTHON_INFO" | grep 'Python 3.11:' | awk '{print $4}' || echo "")
          
          # Function to check package info without broken pipe errors
          check_package_bubble() {
            local python_exe="$1"
            local version="$2"
            local python_ver="$3"
            
            if [ -n "$python_exe" ]; then
              echo "Verifying state for Python $python_ver..."
              local rich_info=$("$python_exe" -m omnipkg.cli info rich 2>/dev/null || echo "")
              if echo "$rich_info" | grep -q "$version (bubble)" 2>/dev/null; then
                echo "✅ Correct: rich $version is available in a bubble."
                return 0
              else
                echo "❌ FAILED: rich $version was not found in a bubble."
                echo "Rich info output:"
                echo "$rich_info"
                return 1
              fi
            else
              echo "⚠️  Python $python_ver executable not found, skipping verification."
              return 0
            fi
          }
          
          # Verify each Python version
          check_package_bubble "$PYTHON_39_EXE" "13.4.2" "3.9"
          RESULT_39=$?
          
          check_package_bubble "$PYTHON_310_EXE" "13.6.0" "3.10"
          RESULT_310=$?
          
          check_package_bubble "$PYTHON_311_EXE" "13.7.1" "3.11"
          RESULT_311=$?
          
          # Exit with error if any verification failed
          if [ $RESULT_39 -ne 0 ] || [ $RESULT_310 -ne 0 ] || [ $RESULT_311 -ne 0 ]; then
            echo "❌ One or more package verifications failed."
            exit 1
          fi
          
          echo "✅ All package verifications passed."
      
      - name: Run Quantum Multiverse Demo and Verify
        env:
          OMNIPKG_ENV_ID_OVERRIDE: ${{ env.OMNIPKG_ENV_ID_OVERRIDE }}
        run: |
          echo "--- Running Omnipkg Quantum Multiverse Warp Demo ---"
          # Redirect stderr to suppress broken pipe errors but still capture important output
          echo "8" | omnipkg demo 2> >(grep -v "BrokenPipeError\|Broken pipe" || true)
