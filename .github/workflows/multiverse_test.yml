name: "üå† LIVE - Omnipkg Quantum Multiverse Warp"

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e . redis rich==13.7.1

      - name: Configure omnipkg for non-interactive use
        run: |
          python - << 'EOF'
          import sys
          import site
          import json
          from pathlib import Path
          import os
          import sysconfig

          try:
              site_packages_path = site.getsitepackages()[0]
          except (IndexError, AttributeError):
              site_packages_path = sysconfig.get_paths()['purelib']

          project_root = Path(os.environ['GITHUB_WORKSPACE'])
          
          builder_script = project_root / 'omnipkg' / 'package_meta_builder.py'
          if not builder_script.exists():
              print(f"Error: {builder_script} does not exist")
              sys.exit(1)

          config_data = {
              'site_packages_path': site_packages_path,
              'multiversion_base': str(Path(site_packages_path) / '.omnipkg_versions'),
              'python_executable': sys.executable,
              'builder_script_path': str(builder_script),
              'redis_host': 'localhost',
              'redis_port': 6379,
              'redis_key_prefix': 'omnipkg:pkg:',
              'paths_to_index': [str(Path(sys.executable).parent), '/usr/local/bin', '/usr/bin', '/bin', '/usr/sbin', '/sbin'],
              'auto_cleanup': True,
              'cleanup_threshold_days': 30
          }

          config_dir = Path.home() / '.config' / 'omnipkg'
          config_dir.mkdir(parents=True, exist_ok=True)
          config_path = config_dir / 'config.json'
          
          try:
              with open(config_path, 'w') as f:
                  json.dump(config_data, f, indent=2)
              print(f'omnipkg config created at {config_path}:')
              print(json.dumps(config_data, indent=2))
          except Exception as e:
              print(f"Error writing config: {e}")
              sys.exit(1)
          EOF

      - name: Adopt Required Python Versions
        run: |
          echo "--- Adopting Python Versions for Multiverse Test ---"
          
          # Check current Python version
          CURRENT_PYTHON_VERSION=$(python -c "import sys; print(f'{sys.version_info.major}.{sys.version_info.minor}')")
          echo "Current Python version: $CURRENT_PYTHON_VERSION"
          
          # Define required versions
          REQUIRED_VERSIONS=("3.9" "3.10" "3.11")
          
          # Adopt each version if not already current
          for VERSION in "${REQUIRED_VERSIONS[@]}"; do
            if [ "$VERSION" != "$CURRENT_PYTHON_VERSION" ]; then
              echo "Adopting Python $VERSION..."
              if timeout 300 omnipkg python adopt $VERSION; then
                echo "‚úÖ Successfully adopted Python $VERSION"
              else
                echo "‚ùå Failed to adopt Python $VERSION"
                exit 1
              fi
            else
              echo "‚úÖ Python $VERSION is already current version"
            fi
          done
          
          echo "All required Python versions have been adopted!"

      - name: Run Quantum Multiverse Demo
        id: run_multiverse_demo
        run: |
          echo "--- Running Omnipkg Quantum Multiverse Warp Demo (Option 8) ---"
          mkdir -p /tmp/omnipkg-artifacts
          
          # Set pipefail to catch any failures in the pipeline
          set -o pipefail
          
          # Run the demo with option 8 (Quantum Multiverse Warp)
          if timeout 900 bash -c 'echo "8" | omnipkg demo' 2>&1 | tee /tmp/omnipkg-artifacts/multiverse_demo_output.txt; then
            DEMO_EXIT_CODE=0
          else
            DEMO_EXIT_CODE=$?
          fi
          
          echo "## Quantum Multiverse Demo Output" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          cat /tmp/omnipkg-artifacts/multiverse_demo_output.txt >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          
          # Check if demo completed successfully based on output content
          if grep -q "Demo completed successfully!" /tmp/omnipkg-artifacts/multiverse_demo_output.txt || \
             (grep -q "MULTIVERSE TEST COMPLETE!" /tmp/omnipkg-artifacts/multiverse_demo_output.txt && \
              grep -q "CONCURRENT RICH MULTIVERSE TEST" /tmp/omnipkg-artifacts/multiverse_demo_output.txt); then
            
            echo "‚úÖ Multiverse demo completed successfully based on output content."
            echo "demo_outcome=success" >> $GITHUB_OUTPUT
            
            # Verify expected Python versions were tested concurrently
            PYTHON_39_FOUND=$(grep -c "Python 3.9" /tmp/omnipkg-artifacts/multiverse_demo_output.txt || echo "0")
            PYTHON_310_FOUND=$(grep -c "Python 3.10" /tmp/omnipkg-artifacts/multiverse_demo_output.txt || echo "0")
            PYTHON_311_FOUND=$(grep -c "Python 3.11" /tmp/omnipkg-artifacts/multiverse_demo_output.txt || echo "0")
            
            echo "Python version test counts:"
            echo "- Python 3.9: $PYTHON_39_FOUND occurrences"
            echo "- Python 3.10: $PYTHON_310_FOUND occurrences" 
            echo "- Python 3.11: $PYTHON_311_FOUND occurrences"
            
            # Check for concurrent execution indicators
            if grep -q "DIMENSION TEST:" /tmp/omnipkg-artifacts/multiverse_demo_output.txt && \
               grep -q "Thread" /tmp/omnipkg-artifacts/multiverse_demo_output.txt && \
               grep -q "CONCURRENCY TIMELINE VISUALIZATION" /tmp/omnipkg-artifacts/multiverse_demo_output.txt && \
               grep -q "BOTTLENECK ANALYSIS" /tmp/omnipkg-artifacts/multiverse_demo_output.txt; then
              
              echo "‚úÖ Quantum Multiverse demo verified: Concurrent Python execution detected!"
              echo "‚úÖ All expected components found:"
              echo "   - Multi-threaded dimension tests"
              echo "   - Timing breakdown analysis"
              echo "   - Concurrency visualization"
              echo "   - Bottleneck analysis"
              
              # Check for successful context switching
              if grep -q "Context switched to Python" /tmp/omnipkg-artifacts/multiverse_demo_output.txt && \
                 grep -q "LOCK ACQUIRED" /tmp/omnipkg-artifacts/multiverse_demo_output.txt && \
                 grep -q "LOCK RELEASED" /tmp/omnipkg-artifacts/multiverse_demo_output.txt; then
                echo "‚úÖ Context switching and locking mechanisms working correctly!"
                exit 0
              else
                echo "‚ö†Ô∏è Warning: Context switching indicators not found, but demo completed."
                echo "Proceeding since core multiverse functionality passed."
                exit 0
              fi
            else
              echo "‚ö†Ô∏è Warning: Not all concurrent execution indicators found, but demo completed."
              echo "Proceeding since core functionality passed."
              exit 0
            fi
          else
            echo "‚ùå Multiverse demo failed or did not complete successfully."
            echo "demo_outcome=failure" >> $GITHUB_OUTPUT
            echo "Demo output:"
            cat /tmp/omnipkg-artifacts/multiverse_demo_output.txt
            exit 1
          fi

      - name: Verify Multiverse Success Indicators
        if: steps.run_multiverse_demo.outputs.demo_outcome == 'success'
        run: |
          echo "--- Verifying Multiverse Test Success Indicators ---"
          
          # Check for specific success patterns from the example output
          SUCCESS_PATTERNS=(
            "CONCURRENT RICH MULTIVERSE TEST"
            "DIMENSION TEST COMPLETE"
            "DETAILED TIMING BREAKDOWN"
            "CONCURRENCY TIMELINE VISUALIZATION"
            "BOTTLENECK ANALYSIS"
            "MULTIVERSE TEST COMPLETE"
            "Context switched to Python"
            "LOCK ACQUIRED"
            "LOCK RELEASED"
          )
          
          FOUND_PATTERNS=0
          TOTAL_PATTERNS=${#SUCCESS_PATTERNS[@]}
          
          for PATTERN in "${SUCCESS_PATTERNS[@]}"; do
            if grep -q "$PATTERN" /tmp/omnipkg-artifacts/multiverse_demo_output.txt; then
              echo "‚úÖ Found: $PATTERN"
              ((FOUND_PATTERNS++))
            else
              echo "‚ùå Missing: $PATTERN"
            fi
          done
          
          echo "Success indicators found: $FOUND_PATTERNS/$TOTAL_PATTERNS"
          
          if [ $FOUND_PATTERNS -ge $((TOTAL_PATTERNS * 70 / 100)) ]; then
            echo "üéâ Multiverse test PASSED! Found $FOUND_PATTERNS/$TOTAL_PATTERNS expected patterns."
          else
            echo "‚ùå Multiverse test FAILED! Only found $FOUND_PATTERNS/$TOTAL_PATTERNS expected patterns."
            exit 1
          fi

      - name: Archive Multiverse Demo Output
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: omnipkg-multiverse-demo-output
          path: /tmp/omnipkg-artifacts/
          retention-days: 7
          compression-level: 6
