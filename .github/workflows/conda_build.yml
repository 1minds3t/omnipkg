name: Build and Upload Conda Package

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Package version to build'
        required: true
        type: string

jobs:
  # First job: Wait for PyPI to have the package
  wait-for-pypi:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
      sha256: ${{ steps.get-sha.outputs.sha256 }}
    steps:
    - name: Get version
      id: get-version
      run: |
        if [ "${{ github.event_name }}" == "release" ]; then
          VERSION="${{ github.event.release.tag_name }}"
          VERSION="${VERSION#v}"
        else
          VERSION="${{ github.event.inputs.version }}"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Waiting for version: $VERSION"

    - name: Wait for PyPI package availability
      id: wait-pypi
      run: |
        VERSION="${{ steps.get-version.outputs.version }}"
        MAX_ATTEMPTS=20
        SLEEP_TIME=30
        
        echo "Checking for omnipkg version $VERSION on PyPI..."
        
        for i in $(seq 1 $MAX_ATTEMPTS); do
          echo "Attempt $i/$MAX_ATTEMPTS..."
          
          # Check PyPI JSON API first (most reliable)
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" \
            "https://pypi.org/pypi/omnipkg/$VERSION/json")
          
          if [ "$HTTP_CODE" = "200" ]; then
            echo "✓ Package version found on PyPI API!"
            
            # Also verify the tar.gz file is downloadable
            DOWNLOAD_URL="https://files.pythonhosted.org/packages/source/o/omnipkg/omnipkg-$VERSION.tar.gz"
            DOWNLOAD_CODE=$(curl -s -o /dev/null -w "%{http_code}" -I "$DOWNLOAD_URL")
            
            if [ "$DOWNLOAD_CODE" = "200" ] || [ "$DOWNLOAD_CODE" = "302" ]; then
              echo "✓ Package file is downloadable!"
              break
            else
              echo "⚠ Package found in API but file not yet available (HTTP $DOWNLOAD_CODE)"
            fi
          else
            echo "Package not yet available (HTTP $HTTP_CODE)"
          fi
          
          if [ $i -eq $MAX_ATTEMPTS ]; then
            echo "✗ Package not found after $MAX_ATTEMPTS attempts"
            echo "Check: https://pypi.org/project/omnipkg/$VERSION/"
            exit 1
          fi
          
          echo "Waiting ${SLEEP_TIME}s..."
          sleep $SLEEP_TIME
        done

    - name: Download and calculate SHA256
      id: get-sha
      run: |
        VERSION="${{ steps.get-version.outputs.version }}"
        
        echo "Downloading package from PyPI..."
        # Try the files.pythonhosted.org URL first (CDN)
        if ! curl -L -f -o "omnipkg-$VERSION.tar.gz" \
          "https://files.pythonhosted.org/packages/source/o/omnipkg/omnipkg-$VERSION.tar.gz"; then
          # Fallback to pypi.org URL
          echo "CDN failed, trying pypi.org..."
          curl -L -f -o "omnipkg-$VERSION.tar.gz" \
            "https://pypi.org/packages/source/o/omnipkg/omnipkg-$VERSION.tar.gz"
        fi
        
        # Verify file size
        FILE_SIZE=$(wc -c < "omnipkg-$VERSION.tar.gz")
        echo "File size: $FILE_SIZE bytes"
        
        if [ "$FILE_SIZE" -lt 10000 ]; then
          echo "Error: File too small ($FILE_SIZE bytes)"
          exit 1
        fi
        
        echo "Calculating SHA256..."
        if command -v sha256sum &> /dev/null; then
          SHA256=$(sha256sum "omnipkg-$VERSION.tar.gz" | cut -d' ' -f1)
        elif command -v shasum &> /dev/null; then
          SHA256=$(shasum -a 256 "omnipkg-$VERSION.tar.gz" | cut -d' ' -f1)
        else
          SHA256=$(python3 -c "import hashlib; print(hashlib.sha256(open('omnipkg-$VERSION.tar.gz', 'rb').read()).hexdigest())")
        fi
        
        echo "sha256=$SHA256" >> $GITHUB_OUTPUT
        echo "SHA256: $SHA256"

  # Second job: Update conda-forge feedstock
  update-feedstock:
    needs: wait-for-pypi
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    steps:
    - name: Checkout your feedstock fork
      uses: actions/checkout@v4
      with:
        repository: 1minds3t/omnipkg-feedstock
        token: ${{ secrets.GITHUB_TOKEN }}
        path: feedstock

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Update feedstock meta.yaml
      run: |
        cd feedstock
        VERSION="${{ needs.wait-for-pypi.outputs.version }}"
        SHA256="${{ needs.wait-for-pypi.outputs.sha256 }}"
        
        echo "Updating recipe/meta.yaml to version $VERSION with SHA256: $SHA256"
        
        # Update version and sha256 in meta.yaml
        sed -i "s/{% set version = \".*\" %}/{% set version = \"$VERSION\" %}/" recipe/meta.yaml
        sed -i "s/sha256: .*/sha256: $SHA256/" recipe/meta.yaml
        
        # Show the changes
        echo "=== Updated meta.yaml (first 30 lines) ==="
        head -30 recipe/meta.yaml

    - name: Commit and push to fork
      run: |
        cd feedstock
        VERSION="${{ needs.wait-for-pypi.outputs.version }}"
        
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add recipe/meta.yaml
        
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "Update omnipkg to version $VERSION"
          git push
          echo "✓ Changes pushed to fork"
        fi

    - name: Create Pull Request to conda-forge
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.FEEDSTOCK_TOKEN }}
        path: feedstock
        commit-message: "Update omnipkg to version ${{ needs.wait-for-pypi.outputs.version }}"
        title: "Update omnipkg to version ${{ needs.wait-for-pypi.outputs.version }}"
        body: |
          Automated update to omnipkg version ${{ needs.wait-for-pypi.outputs.version }}
          
          - Updated version in meta.yaml
          - Updated SHA256 hash: ${{ needs.wait-for-pypi.outputs.sha256 }}
          
          Changes were automatically generated by GitHub Actions after PyPI release.
        branch: "update-v${{ needs.wait-for-pypi.outputs.version }}"
        base: main
        push-to-fork: 1minds3t/omnipkg-feedstock

  # Third job: Build conda packages for your own channel
  build-and-upload:
    needs: wait-for-pypi
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.10', '3.11', '3.12']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Miniconda
      uses: conda-incubator/setup-miniconda@v3
      with:
        auto-update-conda: true
        python-version: ${{ matrix.python-version }}
        channels: conda-forge,defaults
        channel-priority: strict

    - name: Install conda-build and anaconda-client
      shell: bash -l {0}
      run: |
        conda install conda-build anaconda-client -y

    - name: Update meta.yaml version and hash
      shell: bash -l {0}
      run: |
        VERSION="${{ needs.wait-for-pypi.outputs.version }}"
        SHA256="${{ needs.wait-for-pypi.outputs.sha256 }}"
        
        echo "Using version $VERSION with SHA256: $SHA256"
        
        # Update the version and sha256 in meta.yaml (cross-platform sed)
        if [[ "$RUNNER_OS" == "macOS" ]]; then
          sed -i '' "s/{% set version = \".*\" %}/{% set version = \"$VERSION\" %}/" omnipkg/conda-recipe/meta.yaml
          sed -i '' "s/sha256: .*/sha256: $SHA256/" omnipkg/conda-recipe/meta.yaml
        else
          sed -i "s/{% set version = \".*\" %}/{% set version = \"$VERSION\" %}/" omnipkg/conda-recipe/meta.yaml
          sed -i "s/sha256: .*/sha256: $SHA256/" omnipkg/conda-recipe/meta.yaml
        fi
        
        echo "Updated meta.yaml:"
        head -15 omnipkg/conda-recipe/meta.yaml

    - name: Build conda package
      shell: bash -l {0}
      run: |
        export PYTHONIOENCODING=UTF-8
        conda build omnipkg/conda-recipe --output-folder ./conda-dist

    - name: Upload to Anaconda Cloud
      shell: bash -l {0}
      run: |
        find ./conda-dist -name "*.conda" -o -name "*.tar.bz2" | while read file; do
          echo "Uploading $file"
          anaconda -t ${{ secrets.ANACONDA_TOKEN }} upload "$file" --force
        done
      env:
        ANACONDA_TOKEN: ${{ secrets.ANACONDA_TOKEN }}
