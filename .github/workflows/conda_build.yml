name: Build and Upload Conda Package

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Package version to build'
        required: true
        type: string

jobs:
  build-and-upload:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.10', '3.11', '3.12']

    # --- THIS IS A CRITICAL FIX ---
    # This block tells GitHub to start a Redis container alongside your job.
    # The Conda build's TEST phase can now connect to this service.
    services:
      redis:
        image: redis
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Redis (macOS/Windows fallback)
        shell: bash
        run: |
          if [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            brew install redis
            brew services start redis
          elif [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            # Download and install Redis for Windows
            curl -L -o redis.zip https://github.com/tporadowski/redis/releases/download/v5.0.14.1/Redis-x64-5.0.14.1.zip
            unzip redis.zip -d redis
            cd redis && ./redis-server.exe --service-install --service-start
          fi

      - name: Setup Miniconda
        uses: conda-incubator/setup-miniconda@v3
        with:
          auto-update-conda: true
          python-version: ${{ matrix.python-version }}
          channels: conda-forge,defaults
          channel-priority: strict

      - name: Install conda-build and anaconda-client
        shell: bash -l {0}
        run: conda install conda-build anaconda-client -y

      - name: Wait for PyPI, Download Source, and Update meta.yaml
        shell: bash -l {0}
        run: |
          if [ "${{ github.event_name }}" == "release" ]; then
            VERSION="${{ github.event.release.tag_name }}"
            VERSION="${VERSION#v}"
          else
            VERSION="${{ github.event.inputs.version }}"
          fi

          # --- RESILIENT RETRY LOOP ---
          max_attempts=15
          attempt=1
          url="https://pypi.org/packages/source/o/omnipkg/omnipkg-$VERSION.tar.gz"
          
          echo "üîç Waiting for PyPI package to be available at: $url"
          sleep 45 # Initial wait for PyPI to process the new release

          while [ $attempt -le $max_attempts ]; do
            echo "üöÄ Attempt $attempt of $max_attempts..."
            # Use curl with --fail to get a non-zero exit on 404
            if curl -L --fail --connect-timeout 20 -o "omnipkg-$VERSION.tar.gz" "$url"; then
              echo "‚úÖ Successfully downloaded package!"
              break
            fi
            
            if [ $attempt -eq $max_attempts ]; then
              echo "üí• FAILED: Package not available on PyPI after $max_attempts attempts."
              exit 1
            fi

            echo "‚ö†Ô∏è PyPI not ready yet. Retrying in 30 seconds..."
            sleep 30
            attempt=$((attempt + 1))
          done
          
          echo "üîê Calculating SHA256 hash..."
          SHA256=$(python -c "import hashlib; print(hashlib.sha256(open('omnipkg-$VERSION.tar.gz', 'rb').read()).hexdigest())")
          
          echo "üîß Updating meta.yaml..."
          # Use more robust sed patterns
          sed -i.bak "s/{% set version = \".*\" %}/{% set version = \"$VERSION\" %}/" omnipkg/conda-recipe/meta.yaml
          sed -i.bak "s/sha256: .*/sha256: $SHA256/" omnipkg/conda-recipe/meta.yaml
          
          echo "‚úÖ Updated version to $VERSION with SHA256: $SHA256"
          echo "=== Updated meta.yaml snippet ==="
          head -n 5 omnipkg/conda-recipe/meta.yaml

      - name: Build conda package
        shell: bash -l {0}
        # Point to the correct Redis host for the test phase
        run: |
          export REDIS_HOST=localhost
          export REDIS_PORT=6379
          # Verify Redis is accessible before building
          echo "Testing Redis connection..."
          if [[ "${{ matrix.os }}" != "windows-latest" ]]; then
            redis-cli ping || echo "Redis ping failed, but continuing..."
          fi
          conda build omnipkg/conda-recipe --output-folder ./conda-dist

      - name: Upload to Anaconda Cloud
        shell: bash -l {0}
        run: |
          # Use a robust glob pattern that works on all OSes
          anaconda -t ${{ secrets.ANACONDA_TOKEN }} upload conda-dist/**/*.tar.bz2 --force
        env:
          ANACONDA_TOKEN: ${{ secrets.ANACONDA_TOKEN }}

  # --- THIS IS THE SECOND JOB, CORRECTLY PLACED ---
  update-feedstock:
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    needs: build-and-upload # Optional: wait for the main build to succeed
    steps:
      - name: Checkout feedstock
        uses: actions/checkout@v4
        with:
          repository: conda-forge/omnipkg-feedstock
          token: ${{ secrets.FEEDSTOCK_TOKEN }}
          path: feedstock

      - name: Update feedstock recipe
        shell: bash -l {0}
        run: |
          cd feedstock
          VERSION="${{ github.event.release.tag_name }}"
          VERSION="${VERSION#v}"

          # --- USE THE SAME RESILIENT RETRY LOOP ---
          max_attempts=10
          attempt=1
          url="https://pypi.org/packages/source/o/omnipkg/omnipkg-$VERSION.tar.gz"
          echo "üîç Waiting for PyPI package for feedstock: $url"
          sleep 60
          while [ $attempt -le $max_attempts ]; do
            if curl -L --fail -o "omnipkg-$VERSION.tar.gz" "$url"; then break; fi
            if [ $attempt -eq $max_attempts ]; then exit 1; fi
            echo "Feedstock: PyPI not ready. Retrying in 30 seconds..."
            sleep 30; attempt=$((attempt + 1));
          done
          
          SHA256=$(python -c "import hashlib; print(hashlib.sha256(open('omnipkg-$VERSION.tar.gz', 'rb').read()).hexdigest())")

          # Update recipe/meta.yaml
          sed -i "s/{% set version = \".*\" %}/{% set version = \"$VERSION\" %}/" recipe/meta.yaml
          sed -i "s/sha256: .*/sha256: $SHA256/" recipe/meta.yaml

          # Commit and push
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add recipe/meta.yaml
          # Only commit if there are actual changes
          if ! git diff --staged --quiet; then
            git commit -m "Update to version $VERSION"
            git push
          else
            echo "No changes to feedstock recipe."
          fi
