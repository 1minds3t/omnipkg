name: Build and Upload Conda Package

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Package version to build'
        required: true
        type: string

jobs:
  build-and-upload:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.10', '3.11', '3.12']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Miniconda
      uses: conda-incubator/setup-miniconda@v3
      with:
        auto-update-conda: true
        python-version: ${{ matrix.python-version }}
        channels: conda-forge,defaults
        channel-priority: strict
    
    - name: Install conda-build and anaconda-client
      shell: bash -l {0}
      run: conda install conda-build anaconda-client -y
    
    - name: Wait for PyPI, Download Source, and Update meta.yaml
      shell: bash -l {0}
      run: |
        if [ "${{ github.event_name }}" == "release" ]; then
          VERSION="${{ github.event.release.tag_name }}"
          VERSION="${VERSION#v}"
        else
          VERSION="${{ github.event.inputs.version }}"
        fi
        
        # --- RESILIENT RETRY LOOP ---
        max_attempts=15
        attempt=1
        url="https://pypi.org/packages/source/o/omnipkg/omnipkg-$VERSION.tar.gz"
        echo "🔍 Waiting for PyPI package to be available at: $url"
        sleep 45 # Initial wait for PyPI to process the new release
        
        while [ $attempt -le $max_attempts ]; do
          echo "🚀 Attempt $attempt of $max_attempts..."
          if curl -L --fail --connect-timeout 20 -o "omnipkg-$VERSION.tar.gz" "$url"; then
            echo "✅ Successfully downloaded package!"
            break
          fi
          if [ $attempt -eq $max_attempts ]; then echo "💥 FAILED to download!"; exit 1; fi
          echo "⚠️ PyPI not ready. Retrying in 30s..."
          sleep 30; attempt=$((attempt + 1));
        done
        
        SHA256=$(python -c "import hashlib; print(hashlib.sha256(open('omnipkg-$VERSION.tar.gz', 'rb').read()).hexdigest())")
        
        echo "🔧 Updating meta.yaml..."
        # Use a temp file for sed to ensure cross-platform compatibility
        sed "s/{% set version = \".*\" %}/{% set version = \"$VERSION\" %}/" omnipkg/conda-recipe/meta.yaml > meta.tmp && mv meta.tmp omnipkg/conda-recipe/meta.yaml
        sed "s/sha256: .*/sha256: $SHA256/" omnipkg/conda-recipe/meta.yaml > meta.tmp && mv meta.tmp omnipkg/conda-recipe/meta.yaml
        
        # Fix the test command to avoid Redis dependency
        sed "s/omnipkg --help/omnipkg --version/" omnipkg/conda-recipe/meta.yaml > meta.tmp && mv meta.tmp omnipkg/conda-recipe/meta.yaml
        
        echo "✅ meta.yaml updated for v$VERSION"
        echo "=== Updated meta.yaml snippet ==="
        head -n 5 omnipkg/conda-recipe/meta.yaml
    
    - name: Build conda package
      shell: bash -l {0}
      run: conda build omnipkg/conda-recipe --output-folder ./conda-dist
    
    - name: Upload to Anaconda Cloud
      shell: bash -l {0}
      if: github.event_name == 'release'
      run: |
        anaconda -t ${{ secrets.ANACONDA_TOKEN }} upload conda-dist/**/*.tar.bz2 --force
      env:
        ANACONDA_TOKEN: ${{ secrets.ANACONDA_TOKEN }}
