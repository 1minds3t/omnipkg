name: Build and Upload Conda Package

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Package version to build'
        required: true
        type: string

jobs:
  build-and-upload:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.10', '3.11', '3.12']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Miniconda
      uses: conda-incubator/setup-miniconda@v3
      with:
        auto-update-conda: true
        python-version: ${{ matrix.python-version }}
        channels: conda-forge,defaults
        channel-priority: strict
    
    - name: Install conda-build and anaconda-client
      shell: bash -l {0}
      run: |
        if [ "${{ github.event_name }}" == "release" ]; then
          VERSION="${{ github.event.release.tag_name }}"
          VERSION="${VERSION#v}"
        else
          VERSION="${{ github.event.inputs.version }}"
        fi
        
        # --- START THE FIX: THE RESILIENT RETRY LOOP ---
        max_attempts=10
        attempt=1
        url="https://pypi.org/packages/source/o/omnipkg/omnipkg-$VERSION.tar.gz"
        
        echo "Attempting to download source from $url..."
        
        while [ $attempt -le $max_attempts ]; do
          # Use --fail to make curl return a non-zero exit code on 404
          curl -L --fail -o "omnipkg-$VERSION.tar.gz" "$url"
          
          if [ $? -eq 0 ]; then
            echo "✅ Download successful on attempt $attempt."
            break
          else
            echo "⚠️ Attempt $attempt failed. PyPI might not be ready yet. Retrying in 15 seconds..."
            sleep 15
            attempt=$((attempt + 1))
          fi
        done
        
        if [ $attempt -gt $max_attempts ]; then
          echo "❌ Failed to download source after $max_attempts attempts. Aborting."
          exit 1
        fi
        
        # CORRECTED: Use Python for a truly cross-platform SHA256 calculation.
        echo "Calculating SHA256 hash..."
        SHA256=$(python -c "import hashlib; print(hashlib.sha256(open('omnipkg-$VERSION.tar.gz', 'rb').read()).hexdigest())")
        
        # Update the version and sha256 in meta.yaml (cross-platform sed)
        # Note: The macOS sed requires an empty string '' after -i
        if [[ "$RUNNER_OS" == "macOS" ]]; then
          sed -i '' "s/{% set version = \".*\" %}/{% set version = \"$VERSION\" %}/" omnipkg/conda-recipe/meta.yaml
          sed -i '' "s/sha256: .*/sha256: $SHA256/" omnipkg/conda-recipe/meta.yaml
        else
          sed -i "s/{% set version = \".*\" %}/{% set version = \"$VERSION\" %}/" omnipkg/conda-recipe/meta.yaml
          sed -i "s/sha256: .*/sha256: $SHA256/" omnipkg/conda-recipe/meta.yaml
        fi
        
        echo "Updated version to $VERSION with SHA256: $SHA256"
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        
        # Show the updated meta.yaml for debugging
        echo "=== Updated meta.yaml ==="
        head -15 omnipkg/conda-recipe/meta.yaml
    
    - name: Build conda package
      shell: bash -l {0}
      run: |
        conda build omnipkg/conda-recipe --output-folder ./conda-dist
    
    - name: Upload to Anaconda Cloud
      shell: bash -l {0}
      run: |
        anaconda -t ${{ secrets.ANACONDA_TOKEN }} upload ./conda-dist/**/*.tar.bz2 --force
      env:
        ANACONDA_TOKEN: ${{ secrets.ANACONDA_TOKEN }}

  # Alternative job for conda-forge feedstock update
  update-feedstock:
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    steps:
    - name: Checkout feedstock
      uses: actions/checkout@v4
      with:
        repository: conda-forge/omnipkg-feedstock
        token: ${{ secrets.FEEDSTOCK_TOKEN }}
        path: feedstock
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        pip install pyyaml requests
    
    - name: Update feedstock
      run: |
        cd feedstock
        VERSION="${{ github.event.release.tag_name }}"
        VERSION="${VERSION#v}"
        
        # CORRECTED: Use curl and Python for consistency and reliability.
        echo "Downloading source to get SHA256..."
        curl -L -o "omnipkg-$VERSION.tar.gz" "https://pypi.org/packages/source/o/omnipkg/omnipkg-$VERSION.tar.gz"
        SHA256=$(python -c "import hashlib; print(hashlib.sha256(open('omnipkg-$VERSION.tar.gz', 'rb').read()).hexdigest())")
        
        # Update recipe/meta.yaml
        sed -i "s/{% set version = \".*\" %}/{% set version = \"$VERSION\" %}/" recipe/meta.yaml
        sed -i "s/sha256: .*/sha256: $SHA256/" recipe/meta.yaml
        
        # Commit and push
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add recipe/meta.yaml
        git commit -m "Update to version $VERSION" || exit 0
        git push
