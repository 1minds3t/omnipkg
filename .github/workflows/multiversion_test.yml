name: Multi-Version Capability Demonstration

on:
  schedule:
    - cron: '0 */6 * * *'  # Every 6 hours
  workflow_dispatch:
  push:
    branches: [main, develop]

env:
  PYTHON_VERSION: '3.11'

jobs:
  multiversion-demo:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: write

    services:
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3
        ports:
          - 6379:6379

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e . redis tensorflow==2.13.0

      - name: Configure omnipkg
        run: |
          python -c "
          import json, os, sys, site, sysconfig
          from pathlib import Path
          
          site_packages = site.getsitepackages()[0] if site.getsitepackages() else sysconfig.get_paths()['purelib']
          project_root = Path('.').resolve()
          
          config = {
              'cache_dir': str(project_root / '.omnipkg_cache'),
              'metadata_cache_dir': str(project_root / '.omnipkg_metadata'),
              'site_packages': site_packages,
              'python_executable': sys.executable,
              'redis_url': 'redis://localhost:6379',
              'enable_redis': True
          }
          
          config_path = project_root / '.omnipkg' / 'config.json'
          config_path.parent.mkdir(exist_ok=True)
          config_path.write_text(json.dumps(config, indent=2))
          print(f'Config written to: {config_path}')
          "

      - name: Test multi-version capability
        run: |
          if pip install tensorflow==2.12.0 --target .omnipkg_cache/tensorflow-2.12.0 --no-deps --force-reinstall; then
            echo "✅ Successfully installed multiple TensorFlow versions"
            echo "OMNIPKG_TENSORFLOW=SUCCESS" >> $GITHUB_ENV
            
            # Verify both versions are accessible
            python -c "
          from omnipkg.loader import omnipkgLoader
          from omnipkg.core import ConfigManager
          
          config = ConfigManager().config
          
          # Test accessing older version
          with omnipkgLoader('tensorflow==2.12.0', config=config):
              import tensorflow as tf_old
              print(f'Isolated TensorFlow: {tf_old.version}')
          
          # Main environment version
          import tensorflow as tf_main
          print(f'Main environment TensorFlow: {tf_main.version}')
          
          print('✅ Both TensorFlow versions accessible in same environment')
          "
          else
            echo "❌ Failed to install multiple TensorFlow versions"
            echo "OMNIPKG_TENSORFLOW=FAILED" >> $GITHUB_ENV
          fi

      - name: Compare with standard pip behavior
        run: |
          echo ""
          echo "=== Standard pip: Attempting multiple TensorFlow versions ==="
          
          python -m venv /tmp/pip_test
          source /tmp/pip_test/bin/activate
          
          pip install tensorflow==2.13.0
          echo "Initial TensorFlow: $(python -c 'import tensorflow; print(tensorflow.__version__)')"
          
          pip install tensorflow==2.12.0
          echo "After second install: $(python -c 'import tensorflow; print(tensorflow.__version__)')"
          echo "PIP_TENSORFLOW=REPLACED" >> $GITHUB_ENV
          
          deactivate
          
          echo ""
          echo "=== Standard uv: Attempting multiple TensorFlow versions ==="
          
          python -m venv /tmp/uv_test
          source /tmp/uv_test/bin/activate
          
          pip install uv
          uv pip install tensorflow==2.13.0
          echo "Initial TensorFlow: $(python -c 'import tensorflow; print(tensorflow.__version__)')"
          
          uv pip install tensorflow==2.12.0
          echo "After second install: $(python -c 'import tensorflow; print(tensorflow.__version__)')"
          echo "UV_TENSORFLOW=REPLACED" >> $GITHUB_ENV

      - name: Generate results summary
        run: |
          echo "# Multi-Version Package Management Results" > results.md
          echo "" >> results.md
          echo "**Test Date:** $(date -u '+%Y-%m-%d %H:%M UTC')" >> results.md
          echo "" >> results.md
          echo "| Tool | Multiple Versions | Result |" >> results.md
          echo "|------|-------------------|--------|" >> results.md
          echo "| omnipkg | TensorFlow 2.13.0 + 2.12.0 | ${{ env.OMNIPKG_TENSORFLOW }} |" >> results.md
          echo "| standard pip | TensorFlow 2.13.0 → 2.12.0 | ${{ env.PIP_TENSORFLOW }} |" >> results.md
          echo "| uv pip | TensorFlow 2.13.0 → 2.12.0 | ${{ env.UV_TENSORFLOW }} |" >> results.md

      - name: Update repository with results
        run: |
          if [[ "${{ env.OMNIPKG_TENSORFLOW }}" == "SUCCESS" ]]; then
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git add results.md
            git commit -m "Update multi-version capability results - $(date -u '+%Y-%m-%d %H:%M UTC')"
            git push || {
              echo "Push failed, attempting rebase and retry..."
              git pull --rebase origin main || true
              git push
            }
          fi
