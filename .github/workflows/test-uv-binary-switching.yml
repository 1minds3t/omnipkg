- name: ‚öôÔ∏è Configure omnipkg for non-interactive use
        run: |
          python - << 'EOF'
          import sys
          import site
          import json
          from pathlib import Path
          import os
          site_packages_path = site.getsitepackages()[0]
          
          # Determine project root (where pyproject.toml is)
          project_root = Path(os.environ['GITHUB_WORKSPACE']) # GITHUB_WORKSPACE is the repo root
          config_data = {
              'site_packages_path': site_packages_path,
              'multiversion_base': str(Path(site_packages_path) / '.omnipkg_versions'),
              'python_executable': sys.executable,
              # Adjust builder_script_path to be relative from project root to omnipkg/package_meta_builder.py
              'builder_script_path': str(project_root / 'omnipkg' / 'package_meta_builder.py'),
              'redis_host': 'localhost',
              'redis_port': 6379,
              'redis_key_prefix': 'omnipkg:pkg:',
              'paths_to_index': [str(Path(sys.executable).parent), '/usr/local/bin', '/usr/bin', '/bin', '/usr/sbin', '/sbin'],
              'auto_cleanup': True,
              'cleanup_threshold_days': 30
          }
          config_dir = Path.home() / '.config' / 'omnipkg'
          config_dir.mkdir(parents=True, exist_ok=True)
          config_path = config_dir / 'config.json'
          with open(config_path, 'w') as f:
              json.dump(config_data, f, indent=2)
          print(f'omnipkg config created at {config_path}:')
          print(json.dumps(config_data, indent=2))
          EOF
      - name: üß™ Run the Demo: UV Test (Binary Switching)
        id: run_demo
        run: |
          echo "--- Running Omnipkg Demo for UV Test (Binary Switching) ---"
          # Simulate user input '2' for UV test
          DEMO_OUTPUT=$(echo "2" | omnipkg demo 2>&1)
          DEMO_EXIT_CODE=$?
          
          echo "$DEMO_OUTPUT" > /tmp/demo_output.txt
          
          if [ $DEMO_EXIT_CODE -eq 0 ]; then
            echo "demo_outcome=success" >> $GITHUB_OUTPUT
            echo "Demo completed successfully."
          else
            echo "demo_outcome=failure" >> $GITHUB_OUTPUT
            echo "Demo failed with exit code $DEMO_EXIT_CODE."
            echo "$DEMO_OUTPUT" # Output to job log on failure
            exit 1 
          fi
