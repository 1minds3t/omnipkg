# .github/workflows/windows_test.yml

name: Omnipkg Full Lifecycle Test (Windows)

on:
  push:
    branches:
      - development
  workflow_dispatch:
    inputs:
      branch:
        description: 'The branch to test'
        required: true
        default: 'development'

jobs:
  full-lifecycle-test-windows:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch || 'development' }}

      # Step 1: Set up the test environment.
      # We install Python 3.11 first so it exists on the system.
      # Then we install 3.10, which makes it the default python/pip for the shell.
      # This creates the perfect scenario to test the 'adopt' command.
      - name: Set up Python 3.11 (for adopting)
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Set up Python 3.10 (as the starting version)
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install omnipkg in editable mode
        run: pip install -e .
        shell: pwsh

      # Step 2: Test if omnipkg can adopt a discovered interpreter.
      # This is your first requirement: test `omnipkg python adopt 3.11`.
      - name: Adopt the existing Python 3.11 interpreter
        run: omnipkg python adopt 3.11
        shell: pwsh
        env:
          PYTHONUTF8: "1"

      # Step 3: Test if omnipkg can swap to the newly adopted interpreter.
      # This is your second requirement: test `omnipkg swap python 3.11`.
      - name: Swap the active context to Python 3.11
        run: omnipkg swap python 3.11
        shell: pwsh
        env:
          PYTHONUTF8: "1"
        
      # Step 4: Test package installation AFTER swapping.
      # This is your third requirement: confirm omnipkg still works.
      # We use 'six' as a small, simple test package.
      - name: Install a package in the new 3.11 context
        run: omnipkg install six==1.16.0
        shell: pwsh
        env:
          PYTHONUTF8: "1"

      # Step 5: Verify the knowledge base was updated correctly.
      # This is your final requirement: check if the cache was updated.
      # We check the output of 'info' for the correct version. If it's not
      # there, the `Select-String` (grep) will fail, failing the workflow.
      - name: Verify package info is in the knowledge base
        run: omnipkg info six | Select-String -Pattern "1.16.0"
        shell: pwsh
        env:
          PYTHONUTF8: "1"
