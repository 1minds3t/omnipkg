name: 🥊 omnipkg vs The World - Battle & Resilience Test

on:
  schedule:
    - cron: '0 * * * *' # Run every hour
  workflow_dispatch:
  push:
    branches: [ 'main', 'test-workflows-feature' ]

jobs:
  comparison-test:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    services:
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: 🏁 Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🐍 Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: 📦 Install omnipkg, Redis client, and uv
        run: |
          python -m pip install --upgrade pip
          pip install -e . redis uv

      - name: ⚙️ Configure omnipkg
        run: |
          python - << 'EOF'
          import sys, site, json, os, sysconfig
          from pathlib import Path
          site_packages_path = site.getsitepackages()[0] if site.getsitepackages() else sysconfig.get_paths()['purelib']
          project_root = Path(os.environ['GITHUB_WORKSPACE'])
          builder_script = project_root / 'omnipkg' / 'package_meta_builder.py'
          config_data = {
              'site_packages_path': site_packages_path,
              'multiversion_base': str(Path(site_packages_path) / '.omnipkg_versions'),
              'python_executable': sys.executable,
              'builder_script_path': str(builder_script),
              'redis_host': 'localhost',
              'redis_port': 6379,
              'redis_key_prefix': 'omnipkg:pkg:',
              'paths_to_index': [str(Path(sys.executable).parent), '/usr/local/bin', '/usr/bin', '/bin', '/usr/sbin', '/sbin'],
              'auto_cleanup': True,
              'cleanup_threshold_days': 30
          }
          config_dir = Path.home() / '.config' / 'omnipkg'
          config_dir.mkdir(parents=True, exist_ok=True)
          with open(config_dir / 'config.json', 'w') as f:
              json.dump(config_data, f, indent=2)
          EOF

      - name: 🚀 omnipkg | Battle Test (PASS Expected)
        id: omnipkg_conflict_test
        run: |
          echo "--- Testing omnipkg: pip==24.0, pip==23.2.1 ---"
          if omnipkg install pip==24.0 pip==23.2.1 --yes; then
            echo "OMNIPKG_CONFLICT_RESULT=PASS" >> $GITHUB_ENV
            echo "✅ omnipkg: Installed multiple pip versions"
          else
            echo "OMNIPKG_CONFLICT_RESULT=FAIL" >> $GITHUB_ENV
            echo "❌ omnipkg: Failed to install multiple pip versions"
          fi

      - name: 💥 pip | Battle Test (FAIL Expected)
        id: pip_conflict_test
        run: |
          echo "--- Testing pip: pip==24.0, pip==23.2.1 ---"
          pip install pip==24.0 > pip_conflict.log 2>&1
          pip install pip==23.2.1 >> pip_conflict.log 2>&1
          echo "PIP_CONFLICT_RESULT=FAIL" >> $GITHUB_ENV
          echo "❌ pip: Overwrote pip version (expected)"
          cat pip_conflict.log

      - name: ⚡️ uv | Battle Test (FAIL Expected)
        id: uv_conflict_test
        run: |
          echo "--- Testing uv: pip==24.0, pip==23.2.1 ---"
          uv pip install pip==24.0 > uv_conflict.log 2>&1
          uv pip install pip==23.2.1 >> uv_conflict.log 2>&1
          echo "UV_CONFLICT_RESULT=FAIL" >> $GITHUB_ENV
          echo "❌ uv: Overwrote pip version (expected)"
          cat uv_conflict.log

      - name: 🛡️ omnipkg | Resilience Test (PASS Expected)
        id: omnipkg_revert_test
        run: |
          echo "--- Testing omnipkg: Revert uv self-sabotage ---"
          omnipkg install uv --yes
          latest_uv=$(uv --version | awk '{print $2}')
          echo "Baseline uv: $latest_uv"
          uv pip install uv==0.7.1 --system > revert.log 2>&1
          echo "After sabotage: $(uv --version | awk '{print $2}')"
          if omnipkg revert --yes >> revert.log 2>&1; then
            echo "OMNIPKG_REVERT_RESULT=PASS" >> $GITHUB_ENV
            echo "✅ omnipkg: Reverted to uv $latest_uv"
          else
            echo "OMNIPKG_REVERT_RESULT=FAIL" >> $GITHUB_ENV
            echo "❌ omnipkg: Revert failed"
          fi
          cat revert.log

      - name: 📥 Download Previous Battle History
        uses: actions/download-artifact@v4
        with:
          name: battle-history
        continue-on-error: true

      - name: 📊 Update Battle Report and README
        run: |
          cat > update_battle_report.py << 'EOF'
          import json, os
          from pathlib import Path
          from datetime import datetime

          RESULTS_FILE = Path("battle_results_history.json")
          README_FILE = Path("README.md")
          
          history_data = {
              "omnipkg_conflict": {"wins": 0, "losses": 0},
              "pip_conflict": {"wins": 0, "losses": 0},
              "uv_conflict": {"wins": 0, "losses": 0},
              "omnipkg_revert": {"wins": 0, "losses": 0},
              "recent_tests": []
          }
          
          if RESULTS_FILE.exists():
              try:
                  with open(RESULTS_FILE, 'r') as f:
                      history_data = json.load(f)
              except Exception as e:
                  print(f"Warning: Could not load history: {e}")

          results = {
              "omnipkg_conflict": os.environ.get('OMNIPKG_CONFLICT_RESULT', 'FAIL'),
              "pip_conflict": os.environ.get('PIP_CONFLICT_RESULT', 'FAIL'),
              "uv_conflict": os.environ.get('UV_CONFLICT_RESULT', 'FAIL'),
              "omnipkg_revert": os.environ.get('OMNIPKG_REVERT_RESULT', 'FAIL')
          }
          test_timestamp = datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S UTC')
          
          for test, result in results.items():
              history_data[test]['wins' if result == 'PASS' else 'losses'] += 1

          history_data['recent_tests'].insert(0, {
              "date": test_timestamp,
              "scenario": "pip==24.0, pip==23.2.1 (conflict); uv self-sabotage revert",
              "omnipkg_conflict": results['omnipkg_conflict'],
              "pip_conflict": results['pip_conflict'],
              "uv_conflict": results['uv_conflict'],
              "omnipkg_revert": results['omnipkg_revert']
          })
          history_data['recent_tests'] = history_data['recent_tests'][:5]

          def win_rate(wins, losses):
              total = wins + losses
              return f"{(wins / total * 100):.0f}%" if total > 0 else "0%"

          battle_stats = f"""\
## 🥊 omnipkg vs The World

Package manager conflict and resilience tests.

| Package Manager | Test | Wins | Losses | Win Rate |
|-----------------|------|------|--------|----------|
| omnipkg 🚀      | Conflict | {history_data['omnipkg_conflict']['wins']} | {history_data['omnipkg_conflict']['losses']} | {win_rate(history_data['omnipkg_conflict']['wins'], history_data['omnipkg_conflict']['losses'])} |
| pip 💥          | Conflict | {history_data['pip_conflict']['wins']} | {history_data['pip_conflict']['losses']} | {win_rate(history_data['pip_conflict']['wins'], history_data['pip_conflict']['losses'])} |
| uv ⚡️          | Conflict | {history_data['uv_conflict']['wins']} | {history_data['uv_conflict']['losses']} | {win_rate(history_data['uv_conflict']['wins'], history_data['uv_conflict']['losses'])} |
| omnipkg 🛡️      | Revert   | {history_data['omnipkg_revert']['wins']} | {history_data['omnipkg_revert']['losses']} | {win_rate(history_data['omnipkg_revert']['wins'], history_data['omnipkg_revert']['losses'])} |

### 📊 Recent Test Results
| Date | Scenario | omnipkg Conflict | pip Conflict | uv Conflict | omnipkg Revert |
|------|----------|------------------|--------------|-------------|----------------|
"""
          for test in history_data['recent_tests']:
              battle_stats += f"| {test['date']} | {test['scenario']} | {test['omnipkg_conflict']} | {test['pip_conflict']} | {test['uv_conflict']} | {test['omnipkg_revert']} |\n"

          battle_stats += """\
**Test Scenarios:**
- **Conflict Test**: Install pip==24.0 and pip==23.2.1 simultaneously
- **Revert Test**: Revert uv self-sabotage (downgrade to 0.7.1)
- ✅ **PASS**: Success in conflict or revert
- ❌ **FAIL**: Overwrites or fails to handle conflict/revert
"""
          
          try:
              readme_content = README_FILE.read_text()
              start, end = "<!-- BATTLE_STATS_START -->", "<!-- BATTLE_STATS_END -->"
              if start in readme_content and end in readme_content:
                  before, after = readme_content.split(start)[0], readme_content.split(end)[1]
                  README_FILE.write_text(before + start + "\n" + battle_stats + "\n" + end + after)
                  print("✅ README.md updated")
              else:
                  print("❌ Error: Add <!-- BATTLE_STATS_START --> and <!-- BATTLE_STATS_END --> to README.md")
          except Exception as e:
              print(f"Error updating README: {e}")

          try:
              with open(RESULTS_FILE, 'w') as f:
                  json.dump(history_data, f, indent=2)
              print(f"✅ Saved history to {RESULTS_FILE}")
          except Exception as e:
              print(f"Error saving history: {e}")
          EOF
          python update_battle_report.py

      - name: 📦 Upload Battle Report History
        uses: actions/upload-artifact@v4
        with:
          name: battle-history
          path: battle_results_history.json
          retention-days: 90

      - name: 💾 Commit README Updates
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "omnipkg Battle Bot"
          git add README.md
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "🥊 Battle update: omnipkg vs The World - $(date -u '+%Y-%m-%d %H:%M UTC')"
            git push
          fi
