# .github/workflows/omnipkg_vs_pip_comparison.yml
name: 🥊 omnipkg vs pip - Multi-Version Battle Test

on:
  schedule:
    - cron: '0 * * * *' # Run every hour (at minute 0)
  workflow_dispatch: # Allow manual trigger

jobs:
  comparison-test:
    runs-on: ubuntu-latest
    permissions:
      contents: write # Needed to update README and upload artifact

    services:
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: 🏁 Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🐍 Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: 📦 Install omnipkg and Redis client
        run: |
          python -m pip install --upgrade pip
          pip install -e . redis

      - name: ⚙️ Configure omnipkg
        run: |
          python - << 'EOF'
          import sys, site, json, os, sysconfig
          from pathlib import Path

          site_packages_path = site.getsitepackages()[0] if site.getsitepackages() else sysconfig.get_paths()['purelib']
          project_root = Path(os.environ['GITHUB_WORKSPACE'])
          builder_script = project_root / 'omnipkg' / 'package_meta_builder.py'

          if not builder_script.exists():
              print(f"Error: {builder_script} does not exist")
              sys.exit(1)

          config_data = {
              'site_packages_path': site_packages_path,
              'multiversion_base': str(Path(site_packages_path) / '.omnipkg_versions'),
              'python_executable': sys.executable,
              'builder_script_path': str(builder_script),
              'redis_host': 'localhost',
              'redis_port': 6379,
              'redis_key_prefix': 'omnipkg:pkg:',
              'paths_to_index': [str(Path(sys.executable).parent), '/usr/local/bin', '/usr/bin', '/bin', '/usr/sbin', '/sbin'],
              'auto_cleanup': True,
              'cleanup_threshold_days': 30
          }

          config_dir = Path.home() / '.config' / 'omnipkg'
          config_dir.mkdir(parents=True, exist_ok=True)
          with open(config_dir / 'config.json', 'w') as f:
              json.dump(config_data, f, indent=2)
          print(f'omnipkg config created at {config_dir / "config.json"}')
          EOF

      - name: 🚀 Test omnipkg Multi-Version Install
        id: omnipkg_test
        run: |
          echo "--- Testing omnipkg: uv==0.7.12, uv==0.7.14 ---"
          pip uninstall -y uv || true
          set +e
          omnipkg install uv==0.7.12 uv==0.7.14 > omnipkg_test_output.log 2>&1
          exit_code=$?
          set -e
          echo "omnipkg_exit_code=$exit_code" >> $GITHUB_OUTPUT
          if [ $exit_code -eq 0 ]; then
            echo "result=PASS" >> $GITHUB_OUTPUT
            echo "OMNIPKG_RESULT=PASS" >> $GITHUB_ENV
            echo "✅ omnipkg: Successfully installed multiple versions"
          else
            echo "result=FAIL" >> $GITHUB_OUTPUT
            echo "OMNIPKG_RESULT=FAIL" >> $GITHUB_ENV
            echo "❌ omnipkg: Failed unexpectedly"
            cat omnipkg_test_output.log
          fi
          cat omnipkg_test_output.log

      - name: 💥 Test pip Multi-Version Install
        id: pip_test
        run: |
          echo "--- Testing pip: uv==0.7.12, uv==0.7.14 ---"
          pip uninstall -y uv || true
          set +e
          pip install uv==0.7.12 > pip_test_output.log 2>&1
          pip install uv==0.7.14 >> pip_test_output.log 2>&1
          exit_code=$?
          echo "pip_exit_code=$exit_code" >> $GITHUB_OUTPUT
          current_version=$(pip show uv | grep "Version:" | awk '{print $2}' || echo "N/A")
          if [ "$current_version" == "0.7.14" ]; then
            echo "result=FAIL" >> $GITHUB_OUTPUT
            echo "PIP_RESULT=FAIL" >> $GITHUB_ENV
            echo "❌ pip: Overwrote 0.7.12 with 0.7.14"
          else
            echo "result=FAIL" >> $GITHUB_OUTPUT
            echo "PIP_RESULT=FAIL" >> $GITHUB_ENV
            echo "❌ pip: Failed to install expected version"
          fi
          set -e
          cat pip_test_output.log

      - name: 📥 Download Previous Battle History
        uses: actions/download-artifact@v4
        with:
          name: battle-history
          path: ./
        continue-on-error: true

      - name: 📊 Update Battle Report and README
        run: |
          cat > update_battle_report.py << 'EOF'
          import json
          import os
          from pathlib import Path
          from datetime import datetime

          RESULTS_FILE = Path("battle_results_history.json")
          README_FILE = Path("README.md")
          
          history_data = {"omnipkg": {"wins": 0, "losses": 0}, "pip": {"wins": 0, "losses": 0}, "recent_tests": []}
          
          if RESULTS_FILE.exists():
              try:
                  with open(RESULTS_FILE, 'r') as f:
                      history_data = json.load(f)
              except Exception as e:
                  print(f"Warning: Could not load history: {e}")

          omnipkg_result = os.environ.get('OMNIPKG_RESULT', 'FAIL')
          pip_result = os.environ.get('PIP_RESULT', 'FAIL')
          test_timestamp = datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S UTC')
          
          history_data['omnipkg']['wins' if omnipkg_result == 'PASS' else 'losses'] += 1
          history_data['pip']['wins' if pip_result == 'PASS' else 'losses'] += 1

          history_data['recent_tests'].insert(0, {
              "date": test_timestamp,
              "scenario": "Installing uv==0.7.12 and uv==0.7.14 (conflicting versions)",
              "omnipkg_result": omnipkg_result,
              "pip_result": pip_result
          })
          history_data['recent_tests'] = history_data['recent_tests'][:5]

          def calculate_win_rate(wins, losses):
              total = wins + losses
              return f"{(wins / total * 100):.0f}%" if total > 0 else "0%"

          omnipkg_win_rate = calculate_win_rate(history_data['omnipkg']['wins'], history_data['omnipkg']['losses'])
          pip_win_rate = calculate_win_rate(history_data['pip']['wins'], history_data['pip']['losses'])

          battle_stats_section_content = f"""## 🥊 omnipkg vs pip Battle Statistics

          Comparison testing of conflicting package installations.

          | Package Manager | Wins | Losses | Win Rate |
          |-----------------|------|--------|----------|
          | omnipkg 🚀      | {history_data['omnipkg']['wins']} | {history_data['omnipkg']['losses']} | {omnipkg_win_rate} |
          | pip 💥          | {history_data['pip']['wins']} | {history_data['pip']['losses']} | {pip_win_rate} |

          ### 📊 Recent Test Results
          | Date | Test Scenario | omnipkg Result | pip Result |
          |------|---------------|----------------|------------|
          """
          
          for test in history_data['recent_tests']:
              battle_stats_section_content += f"| {test['date']} | {test['scenario']} | {test['omnipkg_result']} | {test['pip_result']} |\n"

          battle_stats_section_content += """
          **Test Scenario Details:**
          - **Test Case**: Installing uv==0.7.12 and uv==0.7.14 (conflicting versions)
          - ✅ **PASS**: Successfully maintains both versions
          - ❌ **FAIL**: Overwrites or fails to install both versions
          """
          
          try:
              readme_content = README_FILE.read_text()
              start_marker, end_marker = "<!-- BATTLE_STATS_START -->", "<!-- BATTLE_STATS_END -->"
              if start_marker in readme_content and end_marker in readme_content:
                  before, after = readme_content.split(start_marker)[0], readme_content.split(end_marker)[1]
                  README_FILE.write_text(before + start_marker + "\n" + battle_stats_section_content + "\n" + end_marker + after)
                  print("✅ README.md updated")
              else:
                  print("❌ Error: Battle stats markers not found in README.md. Add <!-- BATTLE_STATS_START --> and <!-- BATTLE_STATS_END -->")
          except Exception as e:
              print(f"Error updating README: {e}")

          try:
              with open(RESULTS_FILE, 'w') as f:
                  json.dump(history_data, f, indent=2)
              print(f"✅ Saved history to {RESULTS_FILE}")
          except Exception as e:
              print(f"Error saving history: {e}")
          EOF
          python update_battle_report.py

      - name: 📦 Upload Battle Report History
        uses: actions/upload-artifact@v4
        with:
          name: battle-history
          path: battle_results_history.json
          retention-days: 90

      - name: 💾 Commit README Updates
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "omnipkg Battle Bot"
          git add README.md
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "🥊 Battle update: omnipkg vs pip results - $(date -u '+%Y-%m-%d %H:%M UTC')"
            git push
          fi
