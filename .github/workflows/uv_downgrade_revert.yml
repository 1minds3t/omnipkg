# .github/workflows/test_uv_revert.yml
name: 🚨 UV Self-Downgrade & omnipkg Revert Test

on:
  workflow_dispatch: # Allows manual trigger from GitHub UI
  push:
    branches: [ 'main', 'test-revert-feature' ] # Trigger on pushes to main or a specific feature branch

jobs:
  uv-revert-test:
    runs-on: ubuntu-latest
    permissions:
      contents: write # Needed for committing the report

    steps:
      - name: 🏁 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: 🔧 Install Redis for omnipkg
        run: |
          sudo apt-get update
          sudo apt-get install -y redis-server
          sudo systemctl start redis-server
          redis-cli ping # Test Redis connection

      - name: 📦 Install omnipkg
        run: |
          python -m pip install --upgrade pip
          pip install -e . # Install omnipkg in editable mode
          
      - name: ⚙️ Configure omnipkg for non-interactive use
        run: |
          # Create omnipkg config directory
          mkdir -p ~/.config/omnipkg
          
          # Create a basic config file to avoid interactive setup
          cat > ~/.config/omnipkg/config.json << EOF
          {
            "multiversion_base": "/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/.omnipkg_versions",
            "redis_host": "localhost",
            "redis_port": 6379,
            "auto_cleanup": true,
            "cleanup_threshold_days": 30
          }
          EOF
          
          echo "omnipkg config created:"
          cat ~/.config/omnipkg/config.json

      - name: 🚀 Install uv (latest) using omnipkg - Establish "Good State"
        id: install_uv_latest
        run: |
          echo "--- Installing uv (latest) with omnipkg to establish a 'good state' ---"
          omnipkg install uv # Install latest uv
          if [ $? -ne 0 ]; then exit 1; fi
          echo "Initial uv version (omnipkg-installed):"
          uv --version
          
          # Force omnipkg to save this as the 'last known good' snapshot
          omnipkg status # This command should trigger the snapshot save
          echo "omnipkg's current status and last known good snapshot saved."

      - name: 💥 Force UV to Downgrade Itself
        id: uv_self_downgrade
        run: |
          echo "--- Forcing uv to downgrade itself to 0.7.13 ---"
          # Ensure uv itself is in PATH
          export PATH="/opt/hostedtoolcache/Python/3.11.13/x64/bin:$PATH" 
          uv pip install uv==0.7.13
          
          if [ $? -ne 0 ]; then
            echo "::set-output name=downgrade_success::false"
            echo "uv self-downgrade failed (unexpectedly)."
            exit 1
          fi
          echo "::set-output name=downgrade_success::true"
          echo "uv self-downgraded successfully. Current uv version:"
          uv --version || true

      - name: 🚑 Run omnipkg Revert
        id: omnipkg_revert
        # Only run if the downgrade was successful, to clearly demonstrate the revert
        if: steps.uv_self_downgrade.outputs.downgrade_success == 'true'
        run: |
          echo "--- Running omnipkg revert to restore good state ---"
          omnipkg revert --yes # Use --yes for non-interactive mode
          
          if [ $? -eq 0 ]; then
            echo "::set-output name=revert_success::true"
            echo "omnipkg revert completed successfully."
          else
            echo "::set-output name=revert_success::false"
            echo "omnipkg revert failed. See logs for details."
            exit 1
          fi

      - name: ✅ Verify Final UV Version After Revert
        if: steps.omnipkg_revert.outputs.revert_success == 'true'
        run: |
          echo "--- Verifying UV version after omnipkg revert ---"
          uv --version
          omnipkg status
          omnipkg info uv

      - name: 📊 Generate Report
        if: always()
        run: |
          REPORT_FILE="uv_revert_test_report.md"
          echo "# 🚨 UV Self-Downgrade & omnipkg Revert Test Report" > $REPORT_FILE
          echo "" >> $REPORT_FILE
          echo "**Workflow Run:** [${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $REPORT_FILE
          echo "**Test Status:** \`${{ job.status }}\`" >> $REPORT_FILE
          echo "" >> $REPORT_FILE
          
          echo "## Test Scenario" >> $REPORT_FILE
          echo "\`\`\`bash" >> $REPORT_FILE
          echo "# 1. Install uv (latest) with omnipkg to establish 'good state'" >> $REPORT_FILE
          echo "omnipkg install uv" >> $REPORT_FILE
          echo "" >> $REPORT_FILE
          echo "# 2. Force uv to downgrade itself (e.g., from 0.7.14 to 0.7.13)" >> $REPORT_FILE
          echo "uv pip install uv==0.7.13" >> $REPORT_FILE
          echo "" >> $REPORT_FILE
          echo "# 3. Run omnipkg revert" >> $REPORT_FILE
          echo "omnipkg revert --yes" >> $REPORT_FILE
          echo "\`\`\`" >> $REPORT_FILE
          echo "" >> $REPORT_FILE
          
          echo "## Initial State (omnipkg-installed UV)" >> $REPORT_FILE
          echo "\`\`\`" >> $REPORT_FILE
          # Capture output from step 1
          echo "$(cat /tmp/initial_uv_version.txt 2>/dev/null || echo 'N/A')" >> $REPORT_FILE
          echo "\`\`\`" >> $REPORT_FILE
          echo "" >> $REPORT_FILE
          
          echo "## UV Self-Downgrade Result" >> $REPORT_FILE
          echo "\`\`\`" >> $REPORT_FILE
          # Capture output from step 2
          echo "$(cat /tmp/downgraded_uv_version.txt 2>/dev/null || echo 'N/A')" >> $REPORT_FILE
          echo "\`\`\`" >> $REPORT_FILE
          echo "**Downgrade Attempt Outcome:** `${{ steps.uv_self_downgrade.outcome }}`" >> $REPORT_FILE
          echo "" >> $REPORT_FILE
          
          echo "## omnipkg Revert Result" >> $REPORT_FILE
          echo "\`\`\`" >> $REPORT_FILE
          omnipkg status >> $REPORT_FILE 2>&1
          omnipkg info uv >> $REPORT_FILE 2>&1
          echo "\`\`\`" >> $REPORT_FILE
          echo "**Revert Operation Outcome:** `${{ steps.omnipkg_revert.outcome }}`" >> $REPORT_FILE
          echo "" >> $REPORT_FILE
          
          echo "## Final Active UV Version Check" >> $REPORT_FILE
          echo "\`\`\`" >> $REPORT_FILE
          uv --version >> $REPORT_FILE 2>&1 || echo "uv command not found in PATH" >> $REPORT_FILE
          echo "\`\`\`" >> $REPORT_FILE
          
          if [ "${{ job.status }}" == "success" ]; then
            echo "### Conclusion" >> $REPORT_FILE
            echo "✅ omnipkg successfully reverted the `uv` self-downgrade, demonstrating its ability to restore the environment to a previously known good state, even after external package manager interference. This is crucial for maintaining environment stability and recovering from unexpected changes." >> $REPORT_FILE
          else
            echo "### Conclusion" >> $REPORT_FILE
            echo "❌ The omnipkg revert test failed. Review workflow logs for details." >> $REPORT_FILE
          fi

      - name: 📤 Upload Report Artifact
        uses: actions/upload-artifact@v4
        with:
          name: uv-revert-test-report
          path: uv_revert_test_report.md
          retention-days: 30
