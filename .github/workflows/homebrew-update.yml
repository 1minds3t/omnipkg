name: Update Homebrew Formula

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Package version to update'
        required: true
        type: string

jobs:
  update-homebrew:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout main repo
      uses: actions/checkout@v4

    - name: Set version
      id: version
      run: |
        if [ "${{ github.event_name }}" == "release" ]; then
          VERSION="${{ github.event.release.tag_name }}"
          VERSION="${VERSION#v}"
        else
          VERSION="${{ github.event.inputs.version }}"
        fi
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Building Homebrew formula for version: $VERSION"

    - name: Wait for PyPI package availability
      run: |
        VERSION="${{ env.VERSION }}"
        URL="https://pypi.org/packages/source/o/omnipkg/omnipkg-$VERSION.tar.gz"
        MAX_ATTEMPTS=30
        SLEEP_TIME=60
        
        echo "üîç Waiting for PyPI package: $URL"
        echo "‚è≥ This may take several minutes after release publication..."
        
        for i in $(seq 1 $MAX_ATTEMPTS); do
          echo ""
          echo "üöÄ Attempt $i/$MAX_ATTEMPTS..."
          
          # Check if package exists with HEAD request first (faster)
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" -I "$URL")
          
          if [ "$HTTP_CODE" = "200" ]; then
            echo "‚úÖ Package found on PyPI (HTTP $HTTP_CODE)!"
            
            # Do a quick download test to verify it's not a false positive
            if curl -L --fail --connect-timeout 10 --max-time 30 -r 0-1023 -o /dev/null "$URL" 2>/dev/null; then
              echo "‚úÖ Package download verified!"
              break
            else
              echo "‚ö†Ô∏è Package found but download test failed, retrying..."
            fi
          else
            echo "üì¶ Package not yet available (HTTP $HTTP_CODE)"
          fi
          
          if [ $i -eq $MAX_ATTEMPTS ]; then
            echo ""
            echo "üí• FAILED: Package not available after $MAX_ATTEMPTS attempts ($(($MAX_ATTEMPTS * $SLEEP_TIME / 60)) minutes)"
            echo ""
            echo "ü§î Possible reasons:"
            echo "   ‚Ä¢ PyPI is still processing the upload"
            echo "   ‚Ä¢ The PyPI upload failed in the publish workflow"
            echo "   ‚Ä¢ Network connectivity issues"
            echo ""
            echo "üîß Solutions:"
            echo "   ‚Ä¢ Check the 'Publish to PyPI' workflow for errors"
            echo "   ‚Ä¢ Verify the package exists at: https://pypi.org/project/omnipkg/$VERSION/"
            echo "   ‚Ä¢ Re-run this workflow manually in a few minutes"
            exit 1
          fi
          
          echo "‚è∞ Waiting ${SLEEP_TIME}s before next attempt..."
          sleep $SLEEP_TIME
        done

    - name: Download and hash PyPI package
      run: |
        VERSION="${{ env.VERSION }}"
        URL="https://pypi.org/packages/source/o/omnipkg/omnipkg-$VERSION.tar.gz"
        
        echo "üì• Downloading package from PyPI..."
        
        # Download with retry logic
        for attempt in 1 2 3; do
          if curl -L --fail --connect-timeout 30 --max-time 300 \
               -o "omnipkg-$VERSION.tar.gz" "$URL"; then
            echo "‚úÖ Download successful!"
            break
          elif [ $attempt -eq 3 ]; then
            echo "‚ùå Download failed after 3 attempts"
            exit 1
          else
            echo "‚ö†Ô∏è Download attempt $attempt failed, retrying..."
            sleep 10
          fi
        done
        
        # Verify file size
        FILE_SIZE=$(wc -c < "omnipkg-$VERSION.tar.gz")
        echo "üì¶ Downloaded file size: $FILE_SIZE bytes"
        
        if [ "$FILE_SIZE" -lt 5000 ]; then
          echo "‚ùå File size suspiciously small ($FILE_SIZE bytes)"
          echo "Content preview:"
          head -c 500 "omnipkg-$VERSION.tar.gz"
          exit 1
        fi
        
        # Calculate SHA256
        echo "üîê Calculating SHA256 hash..."
        if command -v sha256sum >/dev/null 2>&1; then
          SHA256=$(sha256sum "omnipkg-$VERSION.tar.gz" | cut -d' ' -f1)
        elif command -v shasum >/dev/null 2>&1; then
          SHA256=$(shasum -a 256 "omnipkg-$VERSION.tar.gz" | cut -d' ' -f1)
        else
          SHA256=$(python3 -c "
import hashlib
with open('omnipkg-$VERSION.tar.gz', 'rb') as f:
    print(hashlib.sha256(f.read()).hexdigest())
")
        fi
        
        echo "SHA256=$SHA256" >> $GITHUB_ENV
        echo "‚úÖ SHA256: $SHA256"
        
        # Verify it's a valid tar.gz
        if tar -tzf "omnipkg-$VERSION.tar.gz" >/dev/null 2>&1; then
          echo "‚úÖ Valid tar.gz archive verified"
        else
          echo "‚ùå Invalid tar.gz archive!"
          exit 1
        fi
        
        # Clean up
        rm -f "omnipkg-$VERSION.tar.gz"

    - name: Checkout Homebrew tap
      uses: actions/checkout@v4
      with:
        repository: 1minds3t/homebrew-omnipkg
        token: ${{ secrets.HOMEBREW_TAP_TOKEN }}
        path: homebrew-tap

    - name: Update main formula
      run: |
        cd homebrew-tap
        
        if [ ! -f "omnipkg.rb" ]; then
          echo "‚ùå Formula file omnipkg.rb not found!"
          ls -la
          exit 1
        fi
        
        echo "üîß Updating omnipkg formula..."
        
        # Backup original
        cp omnipkg.rb omnipkg.rb.backup
        
        # Update URL and SHA256 with more robust regex
        # This handles both pypi.io and pypi.org URLs
        sed -i -E 's|url "https://pypi\.(io|org)/packages/source/o/omnipkg/omnipkg-[^"]+\.tar\.gz"|url "https://pypi.org/packages/source/o/omnipkg/omnipkg-${{ env.VERSION }}.tar.gz"|' omnipkg.rb
        sed -i -E 's/sha256 "[a-f0-9]{64}"/sha256 "${{ env.SHA256 }}"/' omnipkg.rb
        
        # Verify changes were made
        if diff omnipkg.rb.backup omnipkg.rb >/dev/null; then
          echo "‚ö†Ô∏è WARNING: No changes detected in main formula section!"
          echo "This might indicate a regex matching issue."
          echo ""
          echo "=== Original version line ==="
          grep -A 1 'url "https://pypi' omnipkg.rb.backup | head -2 || echo "Pattern not found"
        else
          echo "‚úÖ Main formula updated successfully"
        fi
        
        rm omnipkg.rb.backup
        
        echo ""
        echo "=== Updated main formula section ==="
        head -20 omnipkg.rb

    - name: Update dependency versions and hashes
      run: |
        cd homebrew-tap
        
        echo "üîç Updating dependency versions from PyPI..."
        
        python3 << 'EOF'
import json
import urllib.request
import re
import time
import sys
from urllib.error import HTTPError, URLError

# Dependencies to update
deps = [
    "aiohappyeyeballs", "aiohttp", "aiosignal", "attrs", "certifi",
    "charset-normalizer", "filelock", "frozenlist", "idna", "multidict",
    "packaging", "propcache", "python-magic", "redis", "requests",
    "tqdm", "typing-extensions", "urllib3", "yarl"
]

print(f"üìã Updating {len(deps)} dependencies...")

try:
    with open('omnipkg.rb', 'r') as f:
        formula_content = f.read()
except FileNotFoundError:
    print("‚ùå Error: omnipkg.rb not found!")
    sys.exit(1)

updated_count = 0
failed_deps = []

for i, dep in enumerate(deps, 1):
    print(f"\nüîÑ [{i}/{len(deps)}] Processing {dep}...", end=' ')
    
    try:
        # Be nice to PyPI
        if i > 1:
            time.sleep(0.3)
        
        req = urllib.request.Request(
            f'https://pypi.org/pypi/{dep}/json',
            headers={'User-Agent': 'GitHub-Actions-Homebrew-Updater'}
        )
        
        with urllib.request.urlopen(req, timeout=30) as response:
            data = json.loads(response.read())
            latest_version = data['info']['version']
            
            # Find the source distribution
            sdist_url = None
            sha256_hash = None
            for url_info in data['urls']:
                if url_info['packagetype'] == 'sdist':
                    sdist_url = url_info['url']
                    sha256_hash = url_info['digests']['sha256']
                    break
            
            if sdist_url and sha256_hash:
                # Update the resource block - more flexible regex
                pattern = f'resource\\s+"{re.escape(dep)}"\\s+do\\s+url\\s+"[^"]*"\\s+sha256\\s+"[a-f0-9]{{64}}"\\s+end'
                replacement = f'resource "{dep}" do\n    url "{sdist_url}"\n    sha256 "{sha256_hash}"\n  end'
                
                new_content = re.sub(pattern, replacement, formula_content)
                
                if new_content != formula_content:
                    formula_content = new_content
                    updated_count += 1
                    print(f"‚úÖ v{latest_version}")
                else:
                    # Try alternative pattern (single line format)
                    pattern2 = f'resource "{re.escape(dep)}" do url "[^"]*" sha256 "[a-f0-9]{{64}}" end'
                    replacement2 = f'resource "{dep}" do url "{sdist_url}" sha256 "{sha256_hash}" end'
                    new_content = re.sub(pattern2, replacement2, formula_content)
                    
                    if new_content != formula_content:
                        formula_content = new_content
                        updated_count += 1
                        print(f"‚úÖ v{latest_version}")
                    else:
                        print(f"‚ö†Ô∏è v{latest_version} (pattern not matched)")
                        failed_deps.append(dep)
            else:
                print(f"‚ö†Ô∏è No sdist found")
                failed_deps.append(dep)
        
    except (HTTPError, URLError) as e:
        print(f"‚ùå Network error: {e}")
        failed_deps.append(dep)
    except Exception as e:
        print(f"‚ùå Error: {e}")
        failed_deps.append(dep)

# Write updated formula
try:
    with open('omnipkg.rb', 'w') as f:
        f.write(formula_content)
    
    print(f"\nüìä Summary:")
    print(f"   ‚úÖ Updated: {updated_count}/{len(deps)}")
    print(f"   ‚ö†Ô∏è  Failed: {len(failed_deps)}/{len(deps)}")
    
    if failed_deps:
        print(f"\n‚ö†Ô∏è  Failed dependencies: {', '.join(failed_deps)}")
        print("   (These will keep their current versions)")
    
except Exception as e:
    print(f"\n‚ùå Error writing formula: {e}")
    sys.exit(1)
EOF

    - name: Verify updated formula
      run: |
        cd homebrew-tap
        
        echo "üîç Verifying updated formula..."
        
        # Check for obvious issues
        ISSUES=0
        
        if grep -q 'sha256 ""' omnipkg.rb; then
          echo "‚ùå Found empty SHA256!"
          ISSUES=$((ISSUES + 1))
        fi
        
        if grep -q 'url ""' omnipkg.rb; then
          echo "‚ùå Found empty URL!"
          ISSUES=$((ISSUES + 1))
        fi
        
        # Verify version was updated
        if ! grep -q 'omnipkg-${{ env.VERSION }}.tar.gz' omnipkg.rb; then
          echo "‚ö†Ô∏è WARNING: Version ${{ env.VERSION }} not found in formula!"
          echo "Current URL line:"
          grep 'pypi.org/packages/source' omnipkg.rb | head -1
          ISSUES=$((ISSUES + 1))
        fi
        
        # Verify SHA256 was updated
        if ! grep -q '${{ env.SHA256 }}' omnipkg.rb; then
          echo "‚ö†Ô∏è WARNING: Expected SHA256 not found in formula!"
          echo "Current SHA256 line:"
          grep -m 1 'sha256' omnipkg.rb
          ISSUES=$((ISSUES + 1))
        fi
        
        if [ $ISSUES -gt 0 ]; then
          echo ""
          echo "‚ùå Found $ISSUES issue(s) in updated formula!"
          echo ""
          echo "=== First 40 lines of formula ==="
          head -40 omnipkg.rb
          exit 1
        fi
        
        echo "‚úÖ Formula validation passed"
        echo ""
        echo "=== Updated formula preview ==="
        head -25 omnipkg.rb

    - name: Commit and push changes
      run: |
        cd homebrew-tap
        
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action Bot"
        
        # Check for changes
        if git diff --quiet omnipkg.rb; then
          echo "‚ÑπÔ∏è No changes detected in omnipkg.rb"
          echo "This might mean the formula was already up to date."
          exit 0
        fi
        
        echo "üìù Changes detected, preparing commit..."
        
        # Show diff summary
        echo ""
        echo "=== Changes summary ==="
        git diff --stat omnipkg.rb
        
        git add omnipkg.rb
        
        # Create detailed commit message
        cat > commit_msg.txt << EOF
Update omnipkg to version ${{ env.VERSION }}

- Updated main package to v${{ env.VERSION }}
- Updated SHA256: ${{ env.SHA256 }}
- Refreshed dependency versions from PyPI

Auto-generated by GitHub Actions
Release: ${{ github.event.release.html_url || 'Manual dispatch' }}
EOF
        
        git commit -F commit_msg.txt
        
        echo ""
        echo "üöÄ Pushing changes to homebrew-omnipkg repository..."
        git push
        
        echo ""
        echo "üéâ Successfully updated Homebrew formula!"
        echo ""
        echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        echo "üì¶ Version: ${{ env.VERSION }}"
        echo "üîê SHA256: ${{ env.SHA256 }}"
        echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        echo ""
        echo "üç∫ Users can now install with:"
        echo "   brew tap 1minds3t/omnipkg"
        echo "   brew install omnipkg"
        echo ""
        echo "üîÑ Or update existing installations:"
        echo "   brew update"
        echo "   brew upgrade omnipkg"
        echo ""
