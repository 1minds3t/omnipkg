name: Update Homebrew Formula

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Package version to update'
        required: true
        type: string

jobs:
  update-homebrew:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout main repo
      uses: actions/checkout@v4

    - name: Set version
      run: |
        if [ "${{ github.event_name }}" == "release" ]; then
          VERSION="${{ github.event.release.tag_name }}"
          VERSION="${VERSION#v}"  # Remove 'v' prefix if present
        else
          VERSION="${{ github.event.inputs.version }}"
        fi
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "Building Homebrew formula for version: $VERSION"
    - name: Wait and get PyPI package info with retry
      run: |
        # --- RESILIENT RETRY LOGIC FOR PYPI AVAILABILITY ---
        max_attempts=15
        attempt=1
        url="https://pypi.org/packages/source/o/omnipkg/omnipkg-${{ env.VERSION }}.tar.gz"
        
        echo "üîç Waiting for PyPI package to be available at: $url"
        echo "‚è≥ This may take a few minutes after release publication..."
        
        # Initial wait before first attempt (PyPI needs time to process)
        echo "üí§ Initial wait of 60 seconds for PyPI processing..."
        sleep 60
        
        while [ $attempt -le $max_attempts ]; do
          echo "üöÄ Attempt $attempt of $max_attempts..."
          
          # Try to download with curl (more reliable than wget)
          if curl -L --fail --connect-timeout 30 --max-time 300 -o "omnipkg-${{ env.VERSION }}.tar.gz" "$url"; then
            echo "‚úÖ Successfully downloaded package on attempt $attempt!"
            
            # Verify the file is actually valid (not an error page)
            file_size=$(wc -c < "omnipkg-${{ env.VERSION }}.tar.gz")
            echo "üì¶ Downloaded file size: $file_size bytes"
            
            if [ "$file_size" -gt 1000 ]; then
              echo "‚úÖ File size looks good, proceeding..."
              break
            else
              echo "‚ö†Ô∏è File too small ($file_size bytes), might be error page. Retrying..."
              rm -f "omnipkg-${{ env.VERSION }}.tar.gz"
            fi
          else
            echo "‚ùå Download failed on attempt $attempt"
          fi
          
          if [ $attempt -lt $max_attempts ]; then
            wait_time=$((30 + attempt * 10))  # Progressive backoff: 40s, 50s, 60s, etc.
            echo "‚è∞ Waiting $wait_time seconds before retry..."
            sleep $wait_time
          fi
          
          attempt=$((attempt + 1))
        done
        
        if [ $attempt -gt $max_attempts ]; then
          echo "üí• FAILED: Package not available on PyPI after $max_attempts attempts"
          echo "ü§î This might mean:"
          echo "   - PyPI is still processing the release"
          echo "   - The package failed to upload to PyPI"
          echo "   - There's a network issue"
          echo ""
          echo "üîß Try running this workflow manually in a few minutes with workflow_dispatch"
          exit 1
        fi
        
        # Calculate SHA256 using a more reliable method
        echo "üîê Calculating SHA256 hash..."
        if command -v sha256sum >/dev/null 2>&1; then
          SHA256=$(sha256sum "omnipkg-${{ env.VERSION }}.tar.gz" | cut -d' ' -f1)
        else
          # Fallback for systems without sha256sum
          SHA256=$(python3 -c "
          import hashlib
          with open('omnipkg-${{ env.VERSION }}.tar.gz', 'rb') as f:
              content = f.read()
              print(hashlib.sha256(content).hexdigest())
          ")
        fi
        
        echo "SHA256=$SHA256" >> $GITHUB_ENV
        echo "‚úÖ Package SHA256: $SHA256"
        
        # Clean up the downloaded file
        rm -f "omnipkg-${{ env.VERSION }}.tar.gz"
    - name: Checkout Homebrew tap
      uses: actions/checkout@v4
      with:
        repository: 1minds3t/homebrew-omnipkg
        token: ${{ secrets.HOMEBREW_TAP_TOKEN }}
        path: homebrew-tap

    - name: Update main formula
      run: |
        cd homebrew-tap
        
        if [ ! -f "omnipkg.rb" ]; then
          echo "‚ùå Formula file omnipkg.rb not found!"
          exit 1
        fi
        
        echo "üîß Updating omnipkg formula..."
        
        # Update the main package URL and SHA256
        # Handle both possible URL formats
        sed -i 's|url "https://pypi\.io/packages/source/o/omnipkg/omnipkg-.*\.tar\.gz"|url "https://pypi.org/packages/source/o/omnipkg/omnipkg-${{ env.VERSION }}.tar.gz"|' omnipkg.rb
        sed -i 's|url "https://pypi\.org/packages/source/o/omnipkg/omnipkg-.*\.tar\.gz"|url "https://pypi.org/packages/source/o/omnipkg/omnipkg-${{ env.VERSION }}.tar.gz"|' omnipkg.rb
        sed -i 's/sha256 ".*"/sha256 "${{ env.SHA256 }}"/' omnipkg.rb
        
        echo "=== Updated main formula section ==="
        head -15 omnipkg.rb
    - name: Update dependency versions and hashes
      run: |
        cd homebrew-tap
        
        echo "üîç Updating dependency versions..."
        
        python3 << 'EOF'
        import json
        import urllib.request
        import re
        import time
        import sys
        from urllib.error import HTTPError, URLError
        
        # Dependencies to update
        deps = [
            "aiohappyeyeballs", "aiohttp", "aiosignal", "attrs", "certifi",
            "charset-normalizer", "filelock", "frozenlist", "idna", "multidict",
            "packaging", "propcache", "python-magic", "redis", "requests",
            "tqdm", "typing-extensions", "urllib3", "yarl"
        ]
        
        print(f"üìã Updating {len(deps)} dependencies...")
        
        try:
            with open('omnipkg.rb', 'r') as f:
                formula_content = f.read()
        except FileNotFoundError:
            print("‚ùå Error: omnipkg.rb not found!")
            sys.exit(1)
        
        updated_count = 0
        failed_count = 0
        
        for i, dep in enumerate(deps, 1):
            print(f"üîÑ [{i}/{len(deps)}] Processing {dep}...")
            
            try:
                # Add small delay to be nice to PyPI API
                if i > 1:
                    time.sleep(0.5)
                
                with urllib.request.urlopen(f'https://pypi.org/pypi/{dep}/json', timeout=30) as response:
                    data = json.loads(response.read())
                    latest_version = data['info']['version']
                    
                    # Find the source distribution
                    sdist_url = None
                    sha256_hash = None
                    for url_info in data['urls']:
                        if url_info['packagetype'] == 'sdist':
                            sdist_url = url_info['url']
                            sha256_hash = url_info['digests']['sha256']
                            break
                    
                    if sdist_url and sha256_hash:
                        print(f"  ‚úÖ Found {dep} v{latest_version}")
                        
                        # Update the resource block with more robust regex
                        pattern = f'(resource "{re.escape(dep)}" do.*?url ")(.*?)(".*?sha256 ")(.*?)(")'
                        replacement = f'\\g<1>{sdist_url}\\g<3>{sha256_hash}\\g<5>'
                        
                        old_formula = formula_content
                        formula_content = re.sub(pattern, replacement, formula_content, flags=re.DOTALL)
                        
                        if formula_content != old_formula:
                            updated_count += 1
                            print(f"  üìù Updated {dep}")
                        else:
                            print(f"  ‚ö†Ô∏è Pattern not found for {dep} (might already be current)")
                    else:
                        print(f"  ‚ö†Ô∏è No source distribution found for {dep}")
                        failed_count += 1
                    
            except (HTTPError, URLError) as e:
                print(f"  ‚ùå HTTP error for {dep}: {e}")
                failed_count += 1
            except json.JSONDecodeError as e:
                print(f"  ‚ùå JSON decode error for {dep}: {e}")
                failed_count += 1
            except Exception as e:
                print(f"  ‚ùå Unexpected error for {dep}: {e}")
                failed_count += 1
        
        # Write the updated formula
        try:
            with open('omnipkg.rb', 'w') as f:
                f.write(formula_content)
            print(f"üìä Summary: {updated_count} updated, {failed_count} failed")
        except Exception as e:
            print(f"‚ùå Error writing formula: {e}")
            sys.exit(1)
        EOF
    - name: Verify updated formula
      run: |
        cd homebrew-tap
        
        echo "üîç Verifying updated formula..."
        echo "=== First 30 lines of updated formula ==="
        head -30 omnipkg.rb
        
        echo ""
        echo "=== Checking for obvious issues ==="
        
        # Basic syntax checks
        if grep -q 'sha256 ""' omnipkg.rb; then
          echo "‚ùå Found empty SHA256 - this will cause issues!"
          exit 1
        fi
        
        if grep -q 'url ""' omnipkg.rb; then
          echo "‚ùå Found empty URL - this will cause issues!"
          exit 1
        fi
        
        echo "‚úÖ Basic validation passed"
    - name: Commit and push changes
      run: |
        cd homebrew-tap
        
        # Configure git
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action Bot"
        
        # Check if there are any changes
        if git diff --quiet omnipkg.rb; then
          echo "‚ÑπÔ∏è No changes detected in omnipkg.rb"
          exit 0
        fi
        
        echo "üìù Changes detected, committing..."
        git add omnipkg.rb
        
        # Create detailed commit message
        commit_msg="Update omnipkg to version ${{ env.VERSION }}
        - Updated main package to v${{ env.VERSION }}
        - Updated SHA256 hash: ${{ env.SHA256 }}
        - Refreshed dependency versions from PyPI
        
        Auto-generated by GitHub Actions"
        
        git commit -m "$commit_msg"
        
        echo "üöÄ Pushing changes to homebrew tap..."
        git push
        
        echo "üéâ Successfully updated Homebrew formula to version ${{ env.VERSION }}!"
        echo ""
        echo "üç∫ Users can now install with:"
        echo "   brew install 1minds3t/omnipkg/omnipkg"
        echo ""
        echo "üîÑ Or update existing installations with:"
        echo "   brew upgrade omnipkg"
