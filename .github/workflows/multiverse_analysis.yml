name: "Omnipkg Multiverse Analysis Test"

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  multiverse-analysis:
    runs-on: ubuntu-latest

    # **FIX 1: Define a consistent config path for the entire job.**
    # This ensures every `omnipkg` command sees the same configuration.
    env:
      OMNIPKG_CONFIG_PATH: "${{ github.workspace }}/.omnipkg_config/config.json"
      PYTHONUNBUFFERED: "1" # For better, unbuffered logging in Python

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.11 (base environment)
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install omnipkg and its dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .

      # **FIX 2: Create a single, robust setup step.**
      # Adopt ALL required interpreters here, once. The test script
      # should not be responsible for setting up its own environment.
      - name: Initialize Omnipkg and Adopt Interpreters
        run: |
          echo "=== Initializing Omnipkg and preparing interpreters ==="
          omnipkg python adopt 3.11
          omnipkg python adopt 3.9
          echo "--- Verifying managed interpreters ---"
          omnipkg info python
          echo "✅ Omnipkg setup complete."

      # **FIX 3: Run the test script directly.**
      # The Python script already contains all the logic for swapping and installing.
      # The CI file's job is to run the test, not to be the test.
      - name: Run Multiverse Analysis Test
        run: |
          python tests/multiverse_analysis.py

      - name: Upload logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: multiverse-logs-and-config
          path: |
            ${{ github.workspace }}/.omnipkg_config/
            ${{ github.workspace }}/multiverse_log.jsonl
          retention-days: 7
      
      # Your Test Summary step is great, no changes needed here.
      - name: Test Summary
        if: always()
        run: |
          echo "## Multiverse Analysis Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ job.status }}" = "success" ]; then
            echo "🎉 **SUCCESS**: Multiverse analysis completed successfully" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ Python 3.9 and 3.11 dimensions were correctly managed." >> $GITHUB_STEP_SUMMARY
            echo "- ✅ Data was passed successfully between Python environments." >> $GITHUB_STEP_SUMMARY
            echo "- ✅ Cross-dimensional validation and prediction: SUCCESS." >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **FAILED**: Multiverse analysis encountered issues" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Check the workflow logs for detailed error information." >> $GITHUB_STEP_SUMMARY
          fi
