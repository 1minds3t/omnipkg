name: "Omnipkg Multiverse Analysis Test"
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  multiverse-analysis:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python 3.11 (base environment)
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install omnipkg dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
      
      - name: Initialize omnipkg
        run: |
          echo "=== Initializing Omnipkg ==="
          export OMNIPKG_CONFIG_PATH="${{ github.workspace }}/.omnipkg_config/config.json"
          omnipkg python adopt 3.11
          omnipkg python adopt 3.9
          omnipkg info python
          echo "✅ Omnipkg setup complete"
      
      - name: Run Multiverse Analysis Test
        run: |
          set -e
          export OMNIPKG_CONFIG_PATH="${{ github.workspace }}/.omnipkg_config/config.json"
          
          echo "🚀 Starting multiverse analysis..."
          
          # STEP 1: Python 3.9 - NumPy/SciPy calculation
          echo "📦 STEP 1: Setting up Python 3.9 dimension..."
          omnipkg swap python 3.9
          
          echo "🔧 Installing NumPy and SciPy for Python 3.9..."
          omnipkg install numpy==1.26.4 scipy==1.13.1
          
          echo "🧪 Executing NumPy/SciPy calculation in Python 3.9..."
          LEGACY_RESULT=$(python -c "
          import scipy.signal
          import numpy as np
          import json
          
          # Simple convolution calculation that should give us ~225
          data = np.array([1, 2, 3, 4, 5])
          result = int(scipy.signal.convolve(data, data).sum())
          print(json.dumps({'calculation_result': result}))
          ")
          
          echo "✅ Python 3.9 calculation result: $LEGACY_RESULT"
          
          # Extract the value for passing to TensorFlow
          CALC_VALUE=$(echo "$LEGACY_RESULT" | python -c "import sys, json; print(json.load(sys.stdin)['calculation_result'])")
          echo "📊 Extracted value for TensorFlow analysis: $CALC_VALUE"
          
          # STEP 2: Python 3.11 - TensorFlow prediction
          echo "📦 STEP 2: Setting up Python 3.11 dimension..."
          omnipkg swap python 3.11
          
          echo "🔧 Installing TensorFlow for Python 3.11..."
          omnipkg install tensorflow==2.17.0
          
          echo "🧪 Executing TensorFlow prediction in Python 3.11..."
          PREDICTION_RESULT=$(python -c "
          import tensorflow as tf
          import numpy as np
          import json
          
          # Input value from Python 3.9 calculation
          input_value = $CALC_VALUE
          print(f'Analyzing value from Python 3.9: {input_value}', file=sys.stderr)
          
          # Simple TensorFlow model for binary classification
          # Normalize input (assuming typical range around 225)
          normalized_input = input_value / 300.0
          
          with tf.device('/CPU:0'):
              # Create simple model
              model = tf.keras.Sequential([
                  tf.keras.layers.Input(shape=(1,)),
                  tf.keras.layers.Dense(10, activation='relu'),
                  tf.keras.layers.Dense(1, activation='sigmoid')
              ])
              
              # Predict success/failure based on input
              tf_input = tf.constant([[float(normalized_input)]], dtype=tf.float32)
              prediction_score = float(model(tf_input).numpy()[0][0])
              
              # Decision logic: values around 225 should predict SUCCESS
              prediction = 'SUCCESS' if input_value > 200 and prediction_score > 0.3 else 'FAILURE'
              
              result = {
                  'input_from_python39': input_value,
                  'normalized_input': normalized_input,
                  'prediction_score': prediction_score,
                  'final_prediction': prediction
              }
              
              print(json.dumps(result))
          ")
          
          echo "✅ Python 3.11 TensorFlow result: $PREDICTION_RESULT"
          
          # Parse final result
          FINAL_PREDICTION=$(echo "$PREDICTION_RESULT" | python -c "import sys, json; print(json.load(sys.stdin)['final_prediction'])")
          
          # Return to original Python version
          echo "🌀 Returning to Python 3.11..."
          omnipkg swap python 3.11
          
          echo "=" * 60
          echo "📊 MULTIVERSE ANALYSIS RESULTS"
          echo "=" * 60
          echo "NumPy/SciPy Result (Python 3.9): $CALC_VALUE"
          echo "TensorFlow Prediction (Python 3.11): $FINAL_PREDICTION"
          
          if [ "$FINAL_PREDICTION" = "SUCCESS" ]; then
              echo "🎉 MULTIVERSE ANALYSIS: SUCCESS!"
              exit 0
          else
              echo "❌ MULTIVERSE ANALYSIS: FAILED!"
              exit 1
          fi
      
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: multiverse-logs
          path: .omnipkg_config/
          retention-days: 7
      
      - name: Test Summary
        if: always()
        run: |
          echo "## Multiverse Analysis Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ job.status }}" = "success" ]; then
            echo "🎉 **SUCCESS**: Multiverse analysis completed successfully" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ Python 3.9 NumPy/SciPy calculation executed" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ Data passed between Python environments" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ Python 3.11 TensorFlow prediction completed" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ Final prediction: SUCCESS (value ~225 detected)" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **FAILED**: Multiverse analysis encountered issues" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Check the workflow logs for detailed error information." >> $GITHUB_STEP_SUMMARY
          fi
