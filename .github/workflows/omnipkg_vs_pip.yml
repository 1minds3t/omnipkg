# .github/workflows/omnipkg_vs_pip_comparison.yml
name: ü•ä omnipkg vs pip - Multi-Version Battle Test

on:
  schedule:
    - cron: '0 * * * *' # Run every hour
  workflow_dispatch: # Allow manual trigger
  push:
    branches: [ 'main', 'test-workflows-feature' ]

jobs:
  comparison-test:
    runs-on: ubuntu-latest
    permissions:
      contents: write # Needed to update README with results
    
    steps:
      - name: üèÅ Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: üêç Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: üîß Install Redis for omnipkg
        run: |
          sudo apt-get update
          sudo apt-get install -y redis-server
          sudo systemctl start redis-server
          redis-cli ping

      - name: üì¶ Install omnipkg
        run: |
          python -m pip install --upgrade pip
          pip install -e .

      - name: ‚öôÔ∏è Configure omnipkg for non-interactive use
        run: |
          mkdir -p ~/.config/omnipkg
          cat > ~/.config/omnipkg/config.json << EOF
          {
            "multiversion_base": "/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/.omnipkg_versions",
            "redis_url": "redis://localhost:6379",
            "auto_cleanup": true,
            "cleanup_threshold_days": 30
          }
          EOF
          echo "omnipkg config created:"
          cat ~/.config/omnipkg/config.json

      # TEST 1: omnipkg (Expected to PASS 100% of the time)
      - name: üöÄ TEST 1 - omnipkg Multi-Version Install
        id: omnipkg_test
        run: |
          echo "=== TESTING OMNIPKG: Installing uv==0.7.12 and uv==0.7.14 ==="
          
          # Clear any existing uv installations
          pip uninstall -y uv || true
          
          set +e # Don't exit on error, we want to capture the result
          omnipkg install uv==0.7.12 uv==0.7.14
          OMNIPKG_EXIT_CODE=$?
          set -e
          
          echo "omnipkg exit code: $OMNIPKG_EXIT_CODE"
          
          if [ $OMNIPKG_EXIT_CODE -eq 0 ]; then
            echo "result=PASS" >> $GITHUB_OUTPUT
            echo "‚úÖ omnipkg SUCCESS: Multiple conflicting versions installed successfully"
            
            # Verify installation
            echo "=== Verification ==="
            omnipkg status
            echo "1" | omnipkg info uv
          else
            echo "result=FAIL" >> $GITHUB_OUTPUT
            echo "‚ùå omnipkg FAILED unexpectedly"
          fi

      # TEST 2: pip (Expected to FAIL 100% of the time)  
      - name: üí• TEST 2 - pip Multi-Version Install (Expected Failure)
        id: pip_test
        run: |
          echo "=== TESTING PIP: Installing uv==0.7.12 and uv==0.7.14 ==="
          
          # Create fresh virtual environment for pip test
          python -m venv pip_test_env
          source pip_test_env/bin/activate
          pip install --upgrade pip
          
          set +e # Don't exit on error, we want to capture the failure
          
          # Attempt 1: Install first version
          echo "Installing uv==0.7.12..."
          pip install uv==0.7.12
          FIRST_INSTALL=$?
          
          if [ $FIRST_INSTALL -eq 0 ]; then
            echo "First version installed successfully"
            
            # Attempt 2: Install conflicting version (this should fail or overwrite)
            echo "Installing uv==0.7.14 (conflicting version)..."
            pip install uv==0.7.14
            SECOND_INSTALL=$?
            
            # Check what version is actually active
            echo "=== Checking final state ==="
            pip show uv
            
            # pip "succeeds" but only keeps the last version (not truly multi-version)
            echo "result=FAIL" >> $GITHUB_OUTPUT
            echo "‚ùå pip LIMITATION: Can only maintain ONE version at a time"
            echo "   ‚Üí First version (0.7.12) was overwritten by second version (0.7.14)"
            echo "   ‚Üí No true multi-version support - this is a FUNCTIONAL FAILURE"
          else
            echo "result=FAIL" >> $GITHUB_OUTPUT
            echo "‚ùå pip FAILED: Could not even install first version"
          fi
          
          set -e
          deactivate

      # Generate comprehensive test report
      - name: üìä Generate Battle Report
        run: |
          TIMESTAMP=$(date -u '+%Y-%m-%d %H:%M:%S UTC')
          REPORT_FILE="battle_report_$(date -u '+%Y%m%d_%H%M%S').md"
          
          echo "# ü•ä omnipkg vs pip Battle Report" > $REPORT_FILE
          echo "" >> $REPORT_FILE
          echo "**Test Date:** $TIMESTAMP" >> $REPORT_FILE
          echo "**Workflow Run:** [${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $REPORT_FILE
          echo "" >> $REPORT_FILE
          
          echo "## üéØ Test Scenario: Multi-Version Package Installation" >> $REPORT_FILE
          echo "**Challenge:** Install two conflicting versions of the same package (\`uv==0.7.12\` and \`uv==0.7.14\`)" >> $REPORT_FILE
          echo "" >> $REPORT_FILE
          
          echo "## üìä Results Summary" >> $REPORT_FILE
          echo "" >> $REPORT_FILE
          echo "| Package Manager | Result | Capability |" >> $REPORT_FILE
          echo "|-----------------|--------|------------|" >> $REPORT_FILE
          echo "| **omnipkg** üöÄ | **${{ steps.omnipkg_test.outputs.result }}** ‚úÖ | True multi-version support with isolation |" >> $REPORT_FILE
          echo "| **pip** üí• | **${{ steps.pip_test.outputs.result }}** ‚ùå | Single version only (overwrites conflicts) |" >> $REPORT_FILE
          echo "" >> $REPORT_FILE
          
          echo "## üî¨ Detailed Analysis" >> $REPORT_FILE
          echo "" >> $REPORT_FILE
          echo "### omnipkg Performance" >> $REPORT_FILE
          if [ "${{ steps.omnipkg_test.outputs.result }}" == "PASS" ]; then
            echo "‚úÖ **PASSED** - Successfully installed and maintains both \`uv==0.7.12\` and \`uv==0.7.14\` simultaneously" >> $REPORT_FILE
            echo "- Intelligent conflict resolution" >> $REPORT_FILE
            echo "- Version isolation without interference" >> $REPORT_FILE
            echo "- Maintains metadata for both versions" >> $REPORT_FILE
          else
            echo "‚ùå **UNEXPECTED FAILURE** - This should be investigated" >> $REPORT_FILE
          fi
          echo "" >> $REPORT_FILE
          
          echo "### pip Limitations" >> $REPORT_FILE
          echo "‚ùå **FAILED** - Cannot maintain multiple versions of the same package" >> $REPORT_FILE
          echo "- Installing \`uv==0.7.14\` overwrote \`uv==0.7.12\`" >> $REPORT_FILE
          echo "- No conflict resolution mechanism" >> $REPORT_FILE
          echo "- Last-install-wins behavior" >> $REPORT_FILE
          echo "- Breaks dependency consistency in complex projects" >> $REPORT_FILE
          echo "" >> $REPORT_FILE
          
          echo "## üèÜ Winner: omnipkg" >> $REPORT_FILE
          echo "omnipkg demonstrates superior package management by solving the fundamental multi-version conflict problem that pip cannot address." >> $REPORT_FILE
          
          # Store results for README update
          echo "OMNIPKG_RESULT=${{ steps.omnipkg_test.outputs.result }}" >> $GITHUB_ENV
          echo "PIP_RESULT=${{ steps.pip_test.outputs.result }}" >> $GITHUB_ENV
          echo "TEST_TIMESTAMP=$TIMESTAMP" >> $GITHUB_ENV

      - name: üìà Update README Battle Score
        run: |
          # Create or update the battle statistics in README
          if ! grep -q "## ü•ä omnipkg vs pip Battle Statistics" README.md; then
            # Add battle section to README if it doesn't exist
            cat >> README.md << 'EOF'

## ü•ä omnipkg vs pip Battle Statistics

> **Live comparison testing conflicting package installations every hour**

| Package Manager | Wins | Losses | Win Rate | Last Updated |
|-----------------|------|--------|----------|--------------|
| **omnipkg** üöÄ  | 0    | 0      | 0%       | Never        |
| **pip** üí•      | 0    | 0      | 0%       | Never        |

### üìä Recent Test Results
<!-- BATTLE_RESULTS_START -->
<!-- BATTLE_RESULTS_END -->

**Test Scenario:** Installing `uv==0.7.12` and `uv==0.7.14` (conflicting versions)
- ‚úÖ **PASS** = Successfully maintains both versions simultaneously  
- ‚ùå **FAIL** = Cannot install both versions or overwrites one with the other

EOF
          fi
          
          # Read current stats
          OMNIPKG_WINS=$(grep "omnipkg.*üöÄ" README.md | sed -n 's/.*| \([0-9]*\) *|.*/\1/p')
          OMNIPKG_LOSSES=$(grep "omnipkg.*üöÄ" README.md | sed -n 's/.*| [0-9]* *| \([0-9]*\) *.*/\1/p')
          PIP_WINS=$(grep "pip.*üí•" README.md | sed -n 's/.*| \([0-9]*\) *|.*/\1/p')
          PIP_LOSSES=$(grep "pip.*üí•" README.md | sed -n 's/.*| [0-9]* *| \([0-9]*\) *.*/\1/p')
          
          # Update wins/losses based on results
          if [ "$OMNIPKG_RESULT" == "PASS" ]; then
            OMNIPKG_WINS=$((OMNIPKG_WINS + 1))
          else
            OMNIPKG_LOSSES=$((OMNIPKG_LOSSES + 1))
          fi
          
          if [ "$PIP_RESULT" == "PASS" ]; then
            PIP_WINS=$((PIP_WINS + 1))
          else
            PIP_LOSSES=$((PIP_LOSSES + 1))
          fi
          
          # Calculate win rates
          OMNIPKG_TOTAL=$((OMNIPKG_WINS + OMNIPKG_LOSSES))
          PIP_TOTAL=$((PIP_WINS + PIP_LOSSES))
          
          if [ $OMNIPKG_TOTAL -gt 0 ]; then
            OMNIPKG_RATE=$(( (OMNIPKG_WINS * 100) / OMNIPKG_TOTAL ))
          else
            OMNIPKG_RATE=0
          fi
          
          if [ $PIP_TOTAL -gt 0 ]; then
            PIP_RATE=$(( (PIP_WINS * 100) / PIP_TOTAL ))
          else
            PIP_RATE=0
          fi
          
          # Update README with new stats
          sed -i "/| \*\*omnipkg\*\* üöÄ/c\| **omnipkg** üöÄ  | $OMNIPKG_WINS    | $OMNIPKG_LOSSES      | ${OMNIPKG_RATE}%       | $TEST_TIMESTAMP |" README.md
          sed -i "/| \*\*pip\*\* üí•/c\| **pip** üí•      | $PIP_WINS    | $PIP_LOSSES      | ${PIP_RATE}%       | $TEST_TIMESTAMP |" README.md
          
          # Add recent test result
          RECENT_RESULT="| $TEST_TIMESTAMP | omnipkg: $OMNIPKG_RESULT | pip: $PIP_RESULT |"
          
          # Update recent results (keep last 10)
          if ! grep -q "| Date | omnipkg Result | pip Result |" README.md; then
            sed -i '/<!-- BATTLE_RESULTS_START -->/a\
| Date | omnipkg Result | pip Result |\
|------|----------------|-------------|' README.md
          fi
          
          sed -i "/<!-- BATTLE_RESULTS_START -->/,/<!-- BATTLE_RESULTS_END -->/{
            /| Date | omnipkg Result | pip Result |/a\\
$RECENT_RESULT
          }" README.md
          
          # Keep only the 10 most recent results
          sed -i '/<!-- BATTLE_RESULTS_START -->/,/<!-- BATTLE_RESULTS_END -->/{
            /|.*|.*|.*|/{
              N;N;N;N;N;N;N;N;N;N;N;
              s/\(.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n\).*/\1/
            }
          }' README.md

      - name: üì§ Upload Battle Report
        uses: actions/upload-artifact@v4
        with:
          name: battle-report-${{ github.run_number }}
          path: battle_report_*.md
          retention-days: 90

      - name: üíæ Commit README Updates
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "Battle Test Bot"
          git add README.md
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "ü•ä Battle update: omnipkg vs pip test results - $(date -u '+%Y-%m-%d %H:%M UTC')"
            git push
          fi
