# .github/workflows/windows_deep_dive.yml

name: Windows Deep-Dive Debug

on:
  push:
    branches:
      - development
  workflow_dispatch:
    inputs:
      branch:
        description: 'The branch to test'
        required: true
        default: 'development'

jobs:
  deep-dive-windows:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch || 'development' }}

      - name: Wipe previous omnipkg config
        run: |
          if (Test-Path ~\.config\omnipkg) {
            Remove-Item ~\.config\omnipkg -Recurse -Force
          }
        shell: pwsh

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install omnipkg
        run: pip install -e .
        shell: pwsh

      # --- NEW DEBUGGING STEP ---
      - name: Show Pre-run Environment State
        run: |
          echo "--- Location of omnipkg executable ---"
          Get-Command omnipkg | Format-List
          echo "--- VENV Path ---"
          echo $env:VIRTUAL_ENV
          echo "--- Contents of .omnipkg directory (before run) ---"
          ls $env:VIRTUAL_ENV\.omnipkg -Recurse -ErrorAction SilentlyContinue
        shell: pwsh
      
      - name: Trigger First-Time Setup
        run: omnipkg status
        shell: pwsh
        env: { PYTHONUTF8: "1" }

      # --- NEW DEBUGGING STEP ---
      - name: Show Post-run Diagnostic Information
        run: |
          echo "--- Contents of config.json ---"
          Get-Content ~\.config\omnipkg\config.json -ErrorAction SilentlyContinue
          echo "" # Newline for readability
          echo "--- Contents of .omnipkg directory in VENV (after run) ---"
          ls $env:VIRTUAL_ENV\.omnipkg -Recurse -ErrorAction SilentlyContinue
          echo "" # Newline for readability
          echo "--- FULL UNFILTERED OUTPUT of 'omnipkg list python' ---"
          omnipkg list python
        shell: pwsh
        env: { PYTHONUTF8: "1" }

      - name: Final Verification (This is the goal)
        run: omnipkg list python | Select-String "Managed" | Select-String "3.10"
        shell: pwsh
        env: { PYTHONUTF8: "1" }
