name: Omnipkg Demo Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test-numpy-scipy:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Start Redis
      uses: supercharge/redis-github-action@1.7.0
      with:
        redis-version: 6
        redis-port: 6379
    
    - name: Install Omnipkg
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        
    - name: Configure Omnipkg
      run: |
        python -c "
        import omnipkg
        config = omnipkg.create_config()
        print(f'omnipkg config created at {config}')
        with open(config, 'r') as f:
            print(f.read())
        "
        
    - name: Run NumPy + SciPy Demo Test
      id: numpy_scipy_test
      run: |
        echo "--- Running Omnipkg Demo for NumPy + SciPy Stress Test (C-Extensions) ---"
        
        # Run the demo with input "3" for NumPy + SciPy test
        # Capture all output to a file for validation
        python -c "
        import subprocess
        import sys
        
        # Run the demo with automated input
        process = subprocess.Popen(
            [sys.executable, '-c', '''
import omnipkg.demo
import sys
# Monkey patch input to automatically select option 3
original_input = input
def mock_input(prompt=\"\"):
    print(prompt + \"3\")  # Print the prompt + our choice
    return \"3\"
input = mock_input
omnipkg.demo.main()
'''],
            stdout=subprocess.PIPE,
            stderr=subprocess.STDOUT,
            text=True,
            bufsize=1
        )
        
        output_lines = []
        # Stream output in real-time while capturing it
        for line in process.stdout:
            print(line, end='', flush=True)
            output_lines.append(line)
        
        process.wait()
        full_output = ''.join(output_lines)
        
        # Write output to file for validation
        with open('demo_output.txt', 'w') as f:
            f.write(full_output)
        
        print(f'DEBUG: omnipkg demo exit code: {process.returncode}')
        
        # Validate the output contains expected strings
        required_strings = [
            'numpy==1.26.4',
            'scipy==1.16.1', 
            'numpy==1.24.3',
            'scipy==1.12.0',
            'OMNIPKG SURVIVED NUCLEAR TESTING'
        ]
        
        missing_strings = []
        for required in required_strings:
            if required not in full_output:
                missing_strings.append(required)
        
        if missing_strings:
            print(f'Error: Expected NumPy + SciPy demo output not found.')
            print(f'Missing: {missing_strings}')
            print('--- FULL OUTPUT FOR DEBUGGING ---')
            print(full_output)
            print('--- END FULL OUTPUT ---')
            sys.exit(1)
        else:
            print('Demo completed successfully (exit code {}, logs verified).'.format(process.returncode))
            
        # Exit with the same code as the demo
        sys.exit(process.returncode)
        " 2>&1
    
    - name: Upload test artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: numpy-scipy-test-logs
        path: |
          demo_output.txt
        retention-days: 7
