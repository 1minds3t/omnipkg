name: 🥊 omnipkg vs The World - Battle & Resilience Test

on:
  schedule:
    - cron: '0 * * * *' # Run every hour
  workflow_dispatch:

jobs:
  comparison-test:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    services:
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: 🏁 Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🐍 Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: 📦 Install omnipkg, Redis client, and uv
        run: |
          python -m pip install --upgrade pip
          pip install -e . redis uv

      - name: ⚙️ Configure omnipkg
        run: |
          # Your configuration script remains the same
          python - << 'EOF'
          import sys, site, json, os, sysconfig
          from pathlib import Path
          site_packages_path = site.getsitepackages()[0] if site.getsitepackages() else sysconfig.get_paths()['purelib']
          project_root = Path(os.environ['GITHUB_WORKSPACE'])
          builder_script = project_root / 'omnipkg' / 'package_meta_builder.py'
          config_data = {
              'site_packages_path': site_packages_path,
              'multiversion_base': str(Path(site_packages_path) / '.omnipkg_versions'),
              'python_executable': sys.executable,
              'builder_script_path': str(builder_script),
              'redis_host': 'localhost',
              'redis_port': 6379,
              'redis_key_prefix': 'omnipkg:pkg:',
              'paths_to_index': [str(Path(sys.executable).parent), '/usr/local/bin', '/usr/bin', '/bin', '/usr/sbin', '/sbin'],
              'auto_cleanup': True,
              'cleanup_threshold_days': 30
          }
          config_dir = Path.home() / '.config' / 'omnipkg'
          config_dir.mkdir(parents=True, exist_ok=True)
          with open(config_dir / 'config.json', 'w') as f:
              json.dump(config_data, f, indent=2)
          EOF

      # --- CONFLICT INSTALLATION TESTS (Managing the Managers) ---

      - name: 🚀 omnipkg | Battle Test (PASS Expected)
        id: omnipkg_conflict_test
        run: |
          echo "--- Testing omnipkg installing conflicting versions of pip ---"
          if omnipkg install pip==24.0 pip==23.2.1; then
            echo "OMNIPKG_CONFLICT_RESULT=PASS" >> $GITHUB_ENV
          else
            echo "OMNIPKG_CONFLICT_RESULT=FAIL" >> $GITHUB_ENV
          fi

      - name: 💥 pip | Battle Test (FAIL Expected)
        id: pip_conflict_test
        run: |
          echo "--- Testing pip downgrading itself ---"
          pip install pip==24.0 > /dev/null 2>&1
          pip install pip==23.2.1 > /dev/null 2>&1
          # This is an expected failure where pip sabotages itself, so we report FAIL for the stats
          echo "PIP_CONFLICT_RESULT=FAIL" >> $GITHUB_ENV

      - name: ⚡️ uv | Battle Test (FAIL Expected)
        id: uv_conflict_test
        run: |
          echo "--- Testing uv downgrading itself ---"
          uv pip install uv==0.5.0 --system > /dev/null 2>&1 || true
          uv pip install uv==0.4.0 --system > /dev/null 2>&1 || true
          # This is an expected failure where uv sabotages itself, so we report FAIL for the stats
          echo "UV_CONFLICT_RESULT=FAIL" >> $GITHUB_ENV

      # --- RESILIENCE TEST (Self-Sabotage & Revert) ---

      - name: 🛡️ omnipkg | Resilience Test (PASS Expected)
        id: omnipkg_revert_test
        run: |
          echo "--- Testing omnipkg reverting uv's self-sabotage ---"
          # 1. Establish a known good state with the latest uv
          omnipkg install uv
          LATEST_UV_VER=$(uv --version | awk '{print $2}')
          echo "Established good state with uv version: $LATEST_UV_VER"

          # 2. Let uv damage the environment by downgrading itself
          uv pip install uv==0.7.1 --system
          echo "uv version after self-sabotage: $(uv --version | awk '{print $2}')"

          # 3. omni revert! The logs will show the "uv in jail" status.
          if omnipkg revert -y; then
            echo "OMNIPKG_REVERT_RESULT=PASS" >> $GITHUB_ENV
            echo "Revert successful! Final uv version: $(uv --version | awk '{print $2}')"
          else
            echo "OMNIPKG_REVERT_RESULT=FAIL" >> $GITHUB_ENV
          fi

      # --- REPORTING ---

      - name: 📥 Download Previous Battle History
        uses: actions/download-artifact@v4
        with:
          name: battle-history
        continue-on-error: true

      - name: 📊 Update Battle Report and README
        run: |
          cat > update_battle_report.py << 'EOF'
          import json
          import os
          from pathlib import Path
          from datetime import datetime

          RESULTS_FILE = Path("battle_results_history.json")
          README_FILE = Path("README.md")

          # A lean data structure
          default_data = {
              "omnipkg": {"wins": 0, "losses": 0, "saves": 0},
              "pip": {"wins": 0, "losses": 0},
              "uv": {"wins": 0, "losses": 0},
              "recent_tests": []
          }

          # Load existing history
          history_data = default_data
          if RESULTS_FILE.exists():
              try:
                  with open(RESULTS_FILE, 'r') as f:
                      loaded_data = json.load(f)
                      # Basic validation to ensure new keys exist
                      for key, value in default_data.items():
                          if key not in loaded_data:
                              loaded_data[key] = value
                          if isinstance(value, dict):
                               for sub_key in value:
                                   if sub_key not in loaded_data.get(key, {}):
                                       loaded_data[key][sub_key] = value[sub_key]
                      history_data = loaded_data
              except Exception as e:
                  print(f"Warning: Could not load or migrate history, starting fresh: {e}")
                  history_data = default_data

          # Read results from environment variables
          omnipkg_conflict = os.environ.get('OMNIPKG_CONFLICT_RESULT', 'FAIL')
          pip_conflict = os.environ.get('PIP_CONFLICT_RESULT', 'FAIL')
          uv_conflict = os.environ.get('UV_CONFLICT_RESULT', 'FAIL')
          omnipkg_revert = os.environ.get('OMNIPKG_REVERT_RESULT', 'FAIL')
          test_timestamp = datetime.utcnow().strftime('%Y-%m-%d %H:%M')

          # Update stats
          history_data['omnipkg']['wins' if omnipkg_conflict == 'PASS' else 'losses'] += 1
          history_data['pip']['wins' if pip_conflict == 'PASS' else 'losses'] += 1
          history_data['uv']['wins' if uv_conflict == 'PASS' else 'losses'] += 1
          if omnipkg_revert == 'PASS':
              history_data['omnipkg']['saves'] += 1

          # Update recent tests log
          history_data['recent_tests'].insert(0, {
              "date": test_timestamp,
              "conflict_omnipkg": omnipkg_conflict,
              "conflict_pip": pip_conflict,
              "conflict_uv": uv_conflict,
              "revert_omnipkg": omnipkg_revert
          })
          history_data['recent_tests'] = history_data['recent_tests'][:5]

          # --- GENERATE CONCISE README CONTENT ---

          def calculate_win_rate(wins, losses):
              total = wins + losses
              return f"{(wins / total * 100):.0f}%" if total > 0 else "0%"

          omnipkg_stats = history_data['omnipkg']
          pip_stats = history_data['pip']
          uv_stats = history_data['uv']

          omnipkg_wr = calculate_win_rate(omnipkg_stats['wins'], omnipkg_stats['losses'])
          pip_wr = calculate_win_rate(pip_stats['wins'], pip_stats['losses'])
          uv_wr = calculate_win_rate(uv_stats['wins'], uv_stats['losses'])

          battle_stats_section_content = f"""## 🥊 omnipkg vs The World: Battle Statistics
          *Live-updated results from our continuous integration tests.*

          | Package Manager | Conflict Test Wins | Environment Saves | Result |
          |:----------------|:------------------:|:-------------------:|:-------|
          | **omnipkg 🚀**  | **{omnipkg_stats['wins']}** ({omnipkg_wr} Win Rate) | **{omnipkg_stats['saves']}** | ✅ **Solves Conflicts & Heals Environment** |
          | **pip 💥**      | {pip_stats['wins']} ({pip_wr} Win Rate) | 0 | ❌ Overwrites Packages |
          | **uv ⚡️**      | {uv_stats['wins']} ({uv_wr} Win Rate) | 0 | ❌ Overwrites Packages |

          **Test Scenarios:**
          - **Conflict Test**: Attempting to install conflicting versions of another package manager (e.g., `pip==24.0` and `pip==23.2.1`). A "Win" means both versions are usable.
          - **Environment Save**: After another tool (`uv`) damages the environment by downgrading itself, `omnipkg revert` is run. A "Save" means the environment was successfully restored.

          ### 📊 Recent Test Log
          | Date (UTC) | omnipkg (Conflict) | pip (Conflict) | uv (Conflict) | omnipkg (Revert) |
          |:-----------|:------------------:|:--------------:|:-------------:|:----------------:|
          """
          for test in history_data['recent_tests']:
              battle_stats_section_content += f"| {test['date']} | {test['conflict_omnipkg']} | {test['conflict_pip']} | {test['conflict_uv']} | {test['revert_omnipkg']} |\n"


          # --- UPDATE THE README FILE ---

          try:
              readme_content = README_FILE.read_text(encoding='utf-8') if README_FILE.exists() else "# omnipkg\n\n"
              start_marker, end_marker = "<!-- BATTLE_STATS_START -->", "<!-- BATTLE_STATS_END -->"

              if start_marker in readme_content and end_marker in readme_content:
                  before, after = readme_content.split(start_marker)[0], readme_content.split(end_marker)[1]
                  README_FILE.write_text(before + start_marker + "\n" + battle_stats_section_content + "\n" + end_marker + after, encoding='utf-8')
                  print("✅ README.md updated with concise battle stats")
              else:
                  updated_content = readme_content.rstrip() + "\n\n" + start_marker + "\n" + battle_stats_section_content + "\n" + end_marker + "\n"
                  README_FILE.write_text(updated_content, encoding='utf-8')
                  print("✅ README.md updated (markers added automatically)")
          except Exception as e:
              print(f"Error updating README: {e}")

          # --- SAVE HISTORY FOR NEXT RUN ---
          try:
              with open(RESULTS_FILE, 'w') as f:
                  json.dump(history_data, f, indent=2)
              print(f"✅ Saved history to {RESULTS_FILE}")
          except Exception as e:
              print(f"Error saving history: {e}")
          EOF
          python update_battle_report.py

      - name: 📦 Upload Battle Report History
        uses: actions/upload-artifact@v4
        with:
          name: battle-history
          path: battle_results_history.json

      - name: 💾 Commit README Updates
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "omnipkg Battle Bot"
          
          # Pull latest changes first, before staging anything
          git pull --rebase origin main || true
          
          # Now stage and commit our changes
          git add README.md
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "🥊 Battle update: omnipkg vs The World results"
            git push
          fi
