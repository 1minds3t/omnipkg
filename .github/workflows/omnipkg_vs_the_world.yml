- name: ðŸ“Š Extract Current Stats from README
        run: |
          cat > extract_stats.py << 'EOF'
          import re, os
          from pathlib import Path

          README_FILE = Path("README.md")
          
          omnipkg_wins = omnipkg_saves = pip_wins = uv_wins = 0
          omnipkg_losses = pip_losses = uv_losses = 0

          if README_FILE.exists():
              try:
                  content = README_FILE.read_text(encoding='utf-8')
                  
                  # Fixed regex patterns to match your exact markdown table format
                  omnipkg_match = re.search(r'\|\s*\*\*`omnipkg`[^|]*\|\s*\*\*(\d+)\*\*\s*\((\d+)%\)\s*\|\s*\*\*(\d+)\*\*\s*\|', content)
                  if omnipkg_match:
                      omnipkg_wins = int(omnipkg_match.group(1))
                      win_rate = int(omnipkg_match.group(2))
                      omnipkg_saves = int(omnipkg_match.group(3))
                      # Calculate losses from win rate
                      total_battles = int(omnipkg_wins * 100 / win_rate) if win_rate > 0 else omnipkg_wins
                      omnipkg_losses = total_battles - omnipkg_wins
                  
                  pip_match = re.search(r'\|\s*\*\*`pip`[^|]*\|\s*(\d+)\s*\((\d+)%\)\s*\|', content)
                  if pip_match:
                      pip_wins = int(pip_match.group(1))
                      win_rate = int(pip_match.group(2))
                      # Calculate losses from win rate
                      total_battles = int(pip_wins * 100 / win_rate) if win_rate > 0 else pip_wins + 1
                      pip_losses = total_battles - pip_wins
                  
                  uv_match = re.search(r'\|\s*\*\*`uv`[^|]*\|\s*(\d+)\s*\((\d+)%\)\s*\|', content)
                  if uv_match:
                      uv_wins = int(uv_match.group(1))
                      win_rate = int(uv_match.group(2))
                      # Calculate losses from win rate  
                      total_battles = int(uv_wins * 100 / win_rate) if win_rate > 0 else uv_wins + 1
                      uv_losses = total_battles - uv_wins
                  
                  print(f"Extracted: omnipkg={omnipkg_wins}W/{omnipkg_losses}L/{omnipkg_saves}S, pip={pip_wins}W/{pip_losses}L, uv={uv_wins}W/{uv_losses}L")
              except Exception as e:
                  print(f"Could not extract stats: {e}")
                  print("README content:")
                  print(content[:1000] + "..." if len(content) > 1000 else content)
          
          with open(os.environ['GITHUB_ENV'], 'a') as f:
              f.write(f"EXISTING_OMNIPKG_WINS={omnipkg_wins}\n")
              f.write(f"EXISTING_OMNIPKG_SAVES={omnipkg_saves}\n")
              f.write(f"EXISTING_PIP_WINS={pip_wins}\n")
              f.write(f"EXISTING_UV_WINS={uv_wins}\n")
              f.write(f"EXISTING_OMNIPKG_LOSSES={omnipkg_losses}\n")
              f.write(f"EXISTING_PIP_LOSSES={pip_losses}\n")
              f.write(f"EXISTING_UV_LOSSES={uv_losses}\n")
          EOF
          python extract_stats.py
