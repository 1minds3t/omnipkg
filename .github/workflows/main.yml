name: "üå† Flask Auto-Healing Demo (Option 9)"

on:
  push:
    branches: 
      - development
      - main
  pull_request:
    branches: 
      - development
      - main
  workflow_dispatch:
    inputs:
      branch:
        description: 'The branch to test'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - main
          - staging

jobs:
  flask-demo-linux:
    runs-on: ubuntu-latest
    name: "Flask Demo - Linux"
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch || github.ref }}
      
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Clean previous omnipkg config
        run: |
          if [ -d ~/.config/omnipkg ]; then
            rm -rf ~/.config/omnipkg
            echo "‚úÖ Cleared previous omnipkg config"
          else
            echo "‚ÑπÔ∏è  No previous config found"
          fi
      
      - name: Install omnipkg
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          echo "‚úÖ Omnipkg installed"
      
      - name: Initialize omnipkg (trigger first-time setup)
        run: |
          echo "üîß Running initial setup..."
          omnipkg status || echo "Initial setup completed with warnings (expected)"
        env:
          PYTHONUTF8: "1"
      
      - name: Run Flask Auto-Healing Demo (Option 9)
        run: |
          echo "üé™ Running Flask Port Finder Demo with Auto-Healing"
          echo "=================================================="
          echo ""
          echo "This demo showcases:"
          echo "  1. UV attempts to run Flask test (will fail - Flask not installed)"
          echo "  2. omnipkg detects the failure and auto-heals by installing Flask"
          echo "  3. omnipkg re-runs the test successfully"
          echo "  4. Performance comparison: omnipkg vs UV"
          echo ""
          echo "Running: echo '9' | omnipkg demo"
          echo ""
          
          # Run demo option 9 via stdin
          echo "9" | omnipkg demo
          
          exitCode=$?
          echo ""
          echo "=================================================="
          echo "Exit code: $exitCode"
          
          if [ $exitCode -eq 0 ]; then
            echo "‚úÖ Flask Auto-Healing Demo completed successfully!"
            echo ""
            echo "Key achievements:"
            echo "  ‚úì UV failed as expected (Flask not installed)"
            echo "  ‚úì omnipkg auto-healed by installing Flask"
            echo "  ‚úì All Flask tests passed after healing"
            echo "  ‚úì Performance comparison showed omnipkg advantage"
          else
            echo "‚ùå Demo failed with exit code: $exitCode"
            exit $exitCode
          fi
        env:
          PYTHONUTF8: "1"

  flask-demo-macos:
    runs-on: macos-latest
    name: "Flask Demo - macOS"
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch || github.ref }}
      
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Clean previous omnipkg config
        run: |
          if [ -d ~/.config/omnipkg ]; then
            rm -rf ~/.config/omnipkg
            echo "‚úÖ Cleared previous omnipkg config"
          else
            echo "‚ÑπÔ∏è  No previous config found"
          fi
      
      - name: Install omnipkg
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          echo "‚úÖ Omnipkg installed"
      
      - name: Initialize omnipkg (trigger first-time setup)
        run: |
          echo "üîß Running initial setup..."
          omnipkg status || echo "Initial setup completed with warnings (expected)"
        env:
          PYTHONUTF8: "1"
      
      - name: Run Flask Auto-Healing Demo (Option 9)
        run: |
          echo "üé™ Running Flask Port Finder Demo with Auto-Healing"
          echo "=================================================="
          echo ""
          echo "This demo showcases:"
          echo "  1. UV attempts to run Flask test (will fail - Flask not installed)"
          echo "  2. omnipkg detects the failure and auto-heals by installing Flask"
          echo "  3. omnipkg re-runs the test successfully"
          echo "  4. Performance comparison: omnipkg vs UV"
          echo ""
          echo "Running: echo '9' | omnipkg demo"
          echo ""
          
          # Run demo option 9 via stdin
          echo "9" | omnipkg demo
          
          exitCode=$?
          echo ""
          echo "=================================================="
          echo "Exit code: $exitCode"
          
          if [ $exitCode -eq 0 ]; then
            echo "‚úÖ Flask Auto-Healing Demo completed successfully!"
            echo ""
            echo "Key achievements:"
            echo "  ‚úì UV failed as expected (Flask not installed)"
            echo "  ‚úì omnipkg auto-healed by installing Flask"
            echo "  ‚úì All Flask tests passed after healing"
            echo "  ‚úì Performance comparison showed omnipkg advantage"
          else
            echo "‚ùå Demo failed with exit code: $exitCode"
            exit $exitCode
          fi
        env:
          PYTHONUTF8: "1"

  flask-demo-windows:
    runs-on: windows-latest
    name: "Flask Demo - Windows"
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch || github.ref }}
      
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Clean previous omnipkg config
        run: |
          if (Test-Path ~\.config\omnipkg) {
            Remove-Item ~\.config\omnipkg -Recurse -Force
            Write-Host "‚úÖ Cleared previous omnipkg config"
          } else {
            Write-Host "‚ÑπÔ∏è  No previous config found"
          }
        shell: pwsh
      
      - name: Install omnipkg
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          Write-Host "‚úÖ Omnipkg installed"
        shell: pwsh
      
      - name: Initialize omnipkg (trigger first-time setup)
        run: |
          Write-Host "üîß Running initial setup..."
          try {
            omnipkg status | Out-Null
          } catch {
            Write-Host "Initial setup completed with warnings (expected)"
          }
        shell: pwsh
        env:
          PYTHONUTF8: "1"
      
      - name: Run Flask Auto-Healing Demo (Option 9)
        run: |
          Write-Host "üé™ Running Flask Port Finder Demo with Auto-Healing"
          Write-Host "=================================================="
          Write-Host ""
          Write-Host "This demo showcases:"
          Write-Host "  1. UV attempts to run Flask test (will fail - Flask not installed)"
          Write-Host "  2. omnipkg detects the failure and auto-heals by installing Flask"
          Write-Host "  3. omnipkg re-runs the test successfully"
          Write-Host "  4. Performance comparison: omnipkg vs UV"
          Write-Host ""
          Write-Host "Running: echo '9' | omnipkg demo"
          Write-Host ""
          
          # Run demo option 9 via stdin (PowerShell style)
          "9" | omnipkg demo
          
          $exitCode = $LASTEXITCODE
          Write-Host ""
          Write-Host "=================================================="
          Write-Host "Exit code: $exitCode"
          
          if ($exitCode -eq 0) {
            Write-Host "‚úÖ Flask Auto-Healing Demo completed successfully!"
            Write-Host ""
            Write-Host "Key achievements:"
            Write-Host "  ‚úì UV failed as expected (Flask not installed)"
            Write-Host "  ‚úì omnipkg auto-healed by installing Flask"
            Write-Host "  ‚úì All Flask tests passed after healing"
            Write-Host "  ‚úì Performance comparison showed omnipkg advantage"
            exit 0
          } else {
            Write-Host "‚ùå Demo failed with exit code: $exitCode"
            exit $exitCode
          }
        shell: pwsh
        env:
          PYTHONUTF8: "1"
