name: "üöÄ Windows - Omnipkg Demo Test (CI - No Redis)"

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    runs-on: windows-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python (3.11)
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install omnipkg
        run: |
          python -m pip install --upgrade pip
          pip install -e .
        shell: pwsh
      
      - name: Install rich via omnipkg
        run: |
          python -m omnipkg.cli install rich
        shell: pwsh
          
      - name: Configure omnipkg for non-interactive use
        run: |
          $configDir = "$HOME\.config\omnipkg"
          New-Item -ItemType Directory -Force -Path $configDir | Out-Null
          
          $config = @{
              interactive = $false
              auto_confirm = $true
          }
          
          $config | ConvertTo-Json -Depth 4 | Out-File -FilePath "$configDir\config.json" -Encoding utf8
          
          Write-Host "‚úÖ Omnipkg configured for non-interactive use"
          Get-Content "$configDir\config.json"
        shell: pwsh
          
      - name: Adopt Python Versions (Pre-warm)
        run: |
          Write-Host "--- Adopting Python Versions ---"
          
          Write-Host "Adopting Python 3.9..."
          python -m omnipkg.cli python adopt 3.9 2>&1 | Out-Null
          if ($LASTEXITCODE -ne 0) {
            Write-Host "‚ö†Ô∏è  Python 3.9 adoption returned exit code $LASTEXITCODE (continuing anyway)"
          }
          
          Write-Host "Adopting Python 3.10..."
          python -m omnipkg.cli python adopt 3.10 2>&1 | Out-Null
          if ($LASTEXITCODE -ne 0) {
            Write-Host "‚ö†Ô∏è  Python 3.10 adoption returned exit code $LASTEXITCODE (continuing anyway)"
          }
          
          Write-Host "‚úÖ Python versions adopted (or already present)"
        shell: pwsh
      
      # --- THIS IS THE FIXED, PARALLEL STEP ---
      - name: Prime Python Environments in Parallel (Trigger KB Rebuild)
        run: |
          Write-Host "--- Getting Python interpreter paths for parallel priming ---"
          
          # Get raw output first for debugging
          $PYTHON_INFO = python -m omnipkg.cli info python 2>&1 | Out-String
          if ($LASTEXITCODE -ne 0) {
            Write-Host "‚ùå Failed to get Python info for priming. Aborting."
            Write-Host $PYTHON_INFO
            exit 1
          }
          
          # DEBUG: Show what we're working with
          Write-Host "=== RAW PYTHON INFO OUTPUT ==="
          Write-Host $PYTHON_INFO
          Write-Host "=== END RAW OUTPUT ==="
          
          $PythonExecutables = @{}
          
          # Parse each line looking for Python version info
          foreach ($line in ($PYTHON_INFO -split '\r?\n')) {
            if ($line -match 'Python (\d\.\d+):(.+)') {
              $version = $matches[1]
              $fullPath = $matches[2].Trim()
              # Extract just the path (before any status info)
              $path = ($fullPath -split '\s+')[0]
              
              Write-Host "DEBUG: Found Python $version at: $path"
              
              if ($path -and (Test-Path $path)) {
                $PythonExecutables[$version] = $path
                Write-Host "‚úÖ Added Python $version to priming list"
              } else {
                Write-Host "‚ö†Ô∏è  Path doesn't exist: $path"
              }
            }
          }
          
          Write-Host "=== FINAL PYTHON EXECUTABLES ==="
          $PythonExecutables | Format-Table -AutoSize
          Write-Host "=== END ==="
          
          if ($PythonExecutables.Count -eq 0) {
            Write-Host "‚ùå No managed Python interpreters found to prime."
            Write-Host "This might mean omnipkg hasn't adopted any Python versions yet."
            exit 1
          }
          
          # Define the priming script block with better output
          $scriptBlock = {
            param($pyVer, $pyExe)
            $timestamp = Get-Date -Format "HH:mm:ss"
            Write-Host "[$timestamp] [Python $pyVer] Starting Knowledge Base rebuild..."
            
            $output = & $pyExe -m omnipkg.cli reset --yes 2>&1
            $exitCode = $LASTEXITCODE
            
            $timestamp = Get-Date -Format "HH:mm:ss"
            Write-Host "[$timestamp] [Python $pyVer] Finished with exit code $exitCode"
            
            if ($exitCode -ne 0) {
              Write-Host "[$timestamp] [Python $pyVer] ERROR OUTPUT:"
              Write-Host $output
            }
            
            return @{
              Version = $pyVer
              ExitCode = $exitCode
              Output = $output
            }
          }
          
          $jobs = @()
          foreach ($version in $PythonExecutables.Keys) {
            $timestamp = Get-Date -Format "HH:mm:ss"
            Write-Host "[$timestamp] üöÄ Launching background priming job for Python $version"
            $jobs += Start-Job -ScriptBlock $scriptBlock -ArgumentList $version, $PythonExecutables[$version]
          }
          
          Write-Host ""
          Write-Host "‚è≥ Waiting for all priming jobs to complete..."
          Write-Host "   (Typically takes 2-3 minutes for multiple Python versions)"
          Write-Host ""
          
          # Wait with progress updates
          $completed = 0
          while ($jobs | Where-Object { $_.State -eq 'Running' }) {
            $running = ($jobs | Where-Object { $_.State -eq 'Running' }).Count
            $timestamp = Get-Date -Format "HH:mm:ss"
            Write-Host "[$timestamp] Still running: $running jobs..."
            Start-Sleep -Seconds 10
          }
          
          # Collect results
          $results = $jobs | Wait-Job | Receive-Job -Wait -AutoRemoveJob
          
          Write-Host ""
          Write-Host "=== PRIMING RESULTS ==="
          foreach ($result in $results) {
            if ($result.ExitCode -eq 0) {
              Write-Host "‚úÖ Python $($result.Version): SUCCESS"
            } else {
              Write-Host "‚ùå Python $($result.Version): FAILED (exit code $($result.ExitCode))"
            }
          }
          Write-Host "=== END RESULTS ==="
          
          Write-Host ""
          Write-Host "‚úÖ All parallel priming jobs have finished."
        shell: pwsh
      
      - name: Pre-Install Test Packages (Cache Warm)
        run: |
          Write-Host "--- Pre-installing test packages ---"
          
          $PYTHON_INFO = python -m omnipkg.cli info python 2>&1
          if ($LASTEXITCODE -ne 0) {
            Write-Host "‚ùå Failed to get Python info"
            exit 1
          }
          
          $PYTHON_39_EXE = ($PYTHON_INFO -split '\r?\n' | Select-String -Pattern 'Python 3.9:' | ForEach-Object { 
            $parts = $_ -split ':', 2
            if ($parts.Length -eq 2) { ($parts[1].Trim()).Split(' ')[0] }
          })
          $PYTHON_310_EXE = ($PYTHON_INFO -split '\r?\n' | Select-String -Pattern 'Python 3.10:' | ForEach-Object { 
            $parts = $_ -split ':', 2
            if ($parts.Length -eq 2) { ($parts[1].Trim()).Split(' ')[0] }
          })
          $PYTHON_311_EXE = ($PYTHON_INFO -split '\r?\n' | Select-String -Pattern 'Python 3.11:' | ForEach-Object { 
            $parts = $_ -split ':', 2
            if ($parts.Length -eq 2) { ($parts[1].Trim()).Split(' ')[0] }
          })
          
          if ($PYTHON_39_EXE -and (Test-Path $PYTHON_39_EXE)) {
            Write-Host "Installing rich==13.4.2 for Python 3.9..."
            & $PYTHON_39_EXE -m omnipkg.cli install rich==13.4.2 2>&1 | Out-Null
          }
          if ($PYTHON_310_EXE -and (Test-Path $PYTHON_310_EXE)) {
            Write-Host "Installing rich==13.6.0 for Python 3.10..."
            & $PYTHON_310_EXE -m omnipkg.cli install rich==13.6.0 2>&1 | Out-Null
          }
          if ($PYTHON_311_EXE -and (Test-Path $PYTHON_311_EXE)) {
            Write-Host "Installing rich==13.7.1 for Python 3.11..."
            & $PYTHON_311_EXE -m omnipkg.cli install rich==13.7.1 2>&1 | Out-Null
          }
          
          Write-Host "‚úÖ Test packages pre-installed."
        shell: pwsh
      
      - name: Run Demo (Option 8 - Quantum Multiverse)
        run: |
          Write-Host "--- Running Omnipkg Demo: Quantum Multiverse ---"
          Write-Host ""
          
          # Run demo with option 8 (non-interactive via stdin)
          echo "8" | python -m omnipkg.cli demo
          
          $exitCode = $LASTEXITCODE
          Write-Host ""
          Write-Host "Demo exit code: $exitCode"
          
          if ($exitCode -eq 0) {
            Write-Host "‚úÖ Demo completed successfully! (Should be fast ~500ms)"
            exit 0
          } else {
            Write-Host "‚ùå Demo failed with exit code: $exitCode"
            exit $exitCode
          }
        shell: pwsh
