name: "üöÄ Windows - Omnipkg Demo Test (CI - No Redis)"

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    runs-on: windows-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python (3.11)
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install omnipkg
        run: |
          python -m pip install --upgrade pip
          pip install -e .
        shell: pwsh
      
      - name: Install rich via omnipkg
        run: |
          omnipkg install rich
        shell: pwsh
          
      - name: Configure omnipkg for non-interactive use
        run: |
          $configDir = "$HOME\.config\omnipkg"
          New-Item -ItemType Directory -Force -Path $configDir | Out-Null
          
          $config = @{
              interactive = $false
              auto_confirm = $true
          }
          
          $config | ConvertTo-Json -Depth 4 | Out-File -FilePath "$configDir\config.json" -Encoding utf8
          
          Write-Host "‚úÖ Omnipkg configured for non-interactive use"
          Get-Content "$configDir\config.json"
        shell: pwsh
          
      - name: Adopt Python Versions (Pre-warm)
        run: |
          Write-Host "--- Adopting Python Versions ---"
          # Suppress errors by redirecting stderr to null
          omnipkg python adopt 3.9 2>$null
          omnipkg python adopt 3.10 2>$null
          Write-Host "‚úÖ Python versions adopted (or already present)"
        shell: pwsh
      
      - name: Prime Python Environments (Trigger KB Rebuild)
        run: |
          Write-Host "--- Priming Python environments ---"
          
          $PYTHON_INFO = omnipkg info python 2>&1
          # Use -split ':' then get the last part (the path) and trim whitespace
          $PYTHON_39_EXE = ($PYTHON_INFO -split '\r?\n' | Select-String -Pattern 'Python 3.9:' | ForEach-Object { ($_ -split ':',2)[1].Trim() })
          $PYTHON_310_EXE = ($PYTHON_INFO -split '\r?\n' | Select-String -Pattern 'Python 3.10:' | ForEach-Object { ($_ -split ':',2)[1].Trim() })
          $PYTHON_311_EXE = ($PYTHON_INFO -split '\r?\n' | Select-String -Pattern 'Python 3.11:' | ForEach-Object { ($_ -split ':',2)[1].Trim() })
          
          if ($PYTHON_39_EXE) {
            Write-Host "Priming Python 3.9 by forcing KB rebuild..."
            Write-Host "Command: $PYTHON_39_EXE -m omnipkg.cli reset --yes"
            & $PYTHON_39_EXE -m omnipkg.cli reset --yes
            Write-Host "Exit code: $LASTEXITCODE"
          }
          if ($PYTHON_310_EXE) {
            Write-Host "Priming Python 3.10 by forcing KB rebuild..."
            Write-Host "Command: $PYTHON_310_EXE -m omnipkg.cli reset --yes"
            & $PYTHON_310_EXE -m omnipkg.cli reset --yes
            Write-Host "Exit code: $LASTEXITCODE"
          }
          if ($PYTHON_311_EXE) {
            Write-Host "Priming Python 3.11 by forcing KB rebuild..."
            Write-Host "Command: $PYTHON_311_EXE -m omnipkg.cli reset --yes"
            & $PYTHON_311_EXE -m omnipkg.cli reset --yes
            Write-Host "Exit code: $LASTEXITCODE"
          }
          
          Write-Host "‚úÖ All Python environments primed."
        shell: pwsh
      
      - name: Pre-Install Test Packages (Cache Warm)
        run: |
          Write-Host "--- Pre-installing test packages ---"
          
          $PYTHON_INFO = omnipkg info python 2>&1
          $PYTHON_39_EXE = ($PYTHON_INFO -split '\r?\n' | Select-String -Pattern 'Python 3.9:' | ForEach-Object { ($_ -split '\s+')[3] })
          $PYTHON_310_EXE = ($PYTHON_INFO -split '\r?\n' | Select-String -Pattern 'Python 3.10:' | ForEach-Object { ($_ -split '\s+')[3] })
          $PYTHON_311_EXE = ($PYTHON_INFO -split '\r?\n' | Select-String -Pattern 'Python 3.11:' | ForEach-Object { ($_ -split '\s+')[3] })
          
          if ($PYTHON_39_EXE) {
            Write-Host "Installing rich==13.4.2 for Python 3.9..."
            & $PYTHON_39_EXE -m omnipkg.cli install rich==13.4.2 2>$null
          }
          if ($PYTHON_310_EXE) {
            Write-Host "Installing rich==13.6.0 for Python 3.10..."
            & $PYTHON_310_EXE -m omnipkg.cli install rich==13.6.0 2>$null
          }
          if ($PYTHON_311_EXE) {
            Write-Host "Installing rich==13.7.1 for Python 3.11..."
            & $PYTHON_311_EXE -m omnipkg.cli install rich==13.7.1 2>$null
          }
          
          Write-Host "‚úÖ Test packages pre-installed."
        shell: pwsh
      
      - name: Run Demo (Option 8 - Quantum Multiverse)
        run: |
          Write-Host "--- Running Omnipkg Demo: Quantum Multiverse ---"
          Write-Host ""
          
          # Run demo with option 8 (non-interactive via stdin)
          echo "8" | omnipkg demo
          
          $exitCode = $LASTEXITCODE
          Write-Host ""
          Write-Host "Demo exit code: $exitCode"
          
          if ($exitCode -eq 0) {
            Write-Host "‚úÖ Demo completed successfully! (Should be fast ~500ms)"
          } else {
            Write-Host "‚ùå Demo failed with exit code: $exitCode"
            exit $exitCode
          }
        shell: pwsh
